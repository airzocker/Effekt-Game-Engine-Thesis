module ecs

import resizable_array
import mutable/map
import io
import io/time
import stream

import game_engine_lib/core
import game_engine_lib/engine

record Entity(id: Int)

record EntityData(archId: Int, componentIndex: Int)

record Arch(componentIds: ResizableArray[Int], entities: ResizableArray[Entity])

type Command[T] {
  CreateEntity(entity: Entity, components: T);
  DestroyEntity(entity: Entity);
}

effect nextComponentId(): Int

interface Component[T] {
  def getId(): Int
  def iterRO(archId: Int) { prog: => Unit / read[T] }: Unit / stop
  def iterRW(archId: Int) { prog: => Unit / { read[T], emit[T] } }: Unit / stop
  def addComponent(archId: Int, value: T): Int
  def removeSwapComponent(archId: Int, index: Int): Option[Int]
  def getComponent(archId: Int, index: Int): T
  def setComponent(archId: Int, index: Int, value: T): Unit
}

interface CommandBuffer[T] {
  def createEntityBuffered(components: T): Entity
  def destroyEntityBuffered(entity: Entity): Unit
}

effect writeCommandBuffer(): Unit

interface Components[T] {
  def getIds(): ResizableArray[Int]
  def iterTuplesRO(archId: Int) { prog: => Unit / read[T] }: Unit / stop
  def iterTuplesRW(archId: Int) { prog: => Unit / { read[T], emit[T] } }: Unit / stop
  def addComponentTuple(archId: Int, value: T): Int
  def removeSwapComponentTuple(archId: Int, index: Int): Option[Int]
}

interface Resource[T] {
  def getResource(): T
  def setResource(value: T): Unit
}

interface ArchManager {
  // Maybe for bulk entity operations later
  //def addArch(componentIds: ResizableArray[Int]): Int
  //def removeArch(archId: Int): Unit

  def addUpdateQuery(componentIds: ResizableArray[Int], WithoutIds: ResizableArray[Int], archIds: Ref[ResizableArray[Int]]): Unit
  def updateQueries(): Unit
  def iterEntitiesRO(archId: Int) { prog: => Unit / read[Entity] }: Unit / stop

  // Maybe for bulk entity operations later
  //def addEntity(archId: Int, entity: Entity): Int

  // Returns archId:
  def addEntity(componentIds: ResizableArray[Int], entity: Entity): Int
  def removeSwapEntity(archId: Int, index: Int): Option[Int]
  def getEntity(archId: Int, index: Int): Entity
}

effect nextEntityId(): Int

interface EntityManager {
  def createEntity[T](components: T): Entity / { Components[T], CommandBuffer[T] }
  def createEntityComponents[T](entity: Entity, components: T): Unit / Components[T]
  def destroyEntity[T](entity: Entity): Unit / { Components[T], CommandBuffer[T] }
  def getComponent[T](entity: Entity): T / Component[T]
  def setComponent[T](entity: Entity, value: T): Unit / Component[T]
}

interface Query[T, With, Without] {
  def foreachRO() { action: T => Unit }: Unit
  def foreachRW() { action: T => T }: Unit
  def foreachEntityRO() { action: (Entity, T) => Unit }: Unit
  def foreachEntityRW() { action: (Entity, T) => T }: Unit
}

interface System {
  def step(): Unit / EntityManager
}

interface World {
  def stepWorld(): Unit / { System, writeCommandBuffer }
  def runWorld(): Unit / { System, writeCommandBuffer }
}

def componentIdManager() { prog: => Unit / nextComponentId } = {
  var lastComponentId = 0;
  try {
    prog();
  } with nextComponentId {
    lastComponentId = lastComponentId + 1;
    resume(lastComponentId)
  }
}

def component[T]() { prog: => Unit / {
  Component[T], Components[(T)], CommandBuffer[T], writeCommandBuffer, nextEntityId
} }: Unit / {
  EntityManager, nextComponentId, writeCommandBuffer, nextEntityId
} = {
  val componentId = do nextComponentId();
  val componentStore: Map[Int, ResizableArray[T]] = emptyMap();
  try {
    with zipComponents1[(T)]();
    prog();
  } with Component[T] {
    def getId() = {
      resume(componentId)
    }
    def iterRO(archId) = {
      resume { { prog } =>
        val components = componentStore.unsafeGet(archId);
        var index = 0;
        try {
          prog();
        } with read[T] {
          resume {
            if (index < components.size()) {
              val component = components.unsafeGet(index);
              index = index + 1;
              component
            } else {
              do stop()
            }
          }
        }
      }
    }
    def iterRW(archId) = {
      resume { { prog } =>
        val components = componentStore.unsafeGet(archId);
        var readIndex = 0;
        var writeIndex = 0;
        try {
          prog();
        } with read[T] {
          resume {
            if (readIndex < components.size()) {
              val component = components.unsafeGet(readIndex);
              readIndex = readIndex + 1;
              component
            } else {
              do stop()
            }
          }
        } with emit[T] { value =>
          if (writeIndex < components.size()) {
            components.unsafeSet(writeIndex, value);
            writeIndex = writeIndex + 1;
          }
          resume(())
        }
      }
    }
    def addComponent(archId, value) = {
      val components = componentStore.get(archId) match {
        case Some(components) => components
        case None() =>
          val components = resizableArray(4);
          componentStore.update(archId, components);
          components
      }
      val index = components.size();
      components.add(value);
      resume(index)
    }
    def removeSwapComponent(archId, index) = {
      val components = componentStore.unsafeGet(archId);
      val swapped = components.removeSwap(index);
      if (components.size() == 0) {
        componentStore.delete(archId);
      }
      resume(swapped)
    }
    def getComponent(archId, index) = {
      resume(
        componentStore.get(archId) match {
          case Some(components) => components.unsafeGet(index)
          case None() => panic("Archetype with id " ++ archId.show() ++ " does not contain components of type id " ++ componentId.show() ++ "!");
        }
      )
    }
    def setComponent(archId, index, value) = {
      resume(
        componentStore.get(archId) match {
          case Some(components) => components.unsafeSet(index, value);
          case None() => panic("Archetype with id " ++ archId.show() ++ " does not contain components of type id " ++ componentId.show() ++ "!");
        }
      )
    }
  }
}

def writeCommand[T](command: Command[T]): Unit / { EntityManager, Components[T], CommandBuffer[T] } = {
  command match {
    case CreateEntity(entity, components) =>
      do createEntityComponents[T](entity, components)
      ()
    case DestroyEntity(entity) =>
      do destroyEntity[T](entity)
      ()
  }
}

def commandBuffer[T]() { prog: => Unit / {
  CommandBuffer[T], writeCommandBuffer, nextEntityId
} }: Unit / {
  EntityManager, Components[T], writeCommandBuffer, nextEntityId
} = {
  var commandBuffer = resizableArray(4);
  def writeBuffer() = {
    if (commandBuffer.size() > 0) {
      commandBuffer.foreach() { command =>
        command.writeCommand[T]();
      }
      commandBuffer = resizableArray(4);
    }
  }
  try {
    try {
      prog();
    } with writeCommandBuffer {
      do writeCommandBuffer();
      writeBuffer();
      resume(())
    }
  } with CommandBuffer[T] {
    def createEntityBuffered(components) = {
      val entity = Entity(do nextEntityId());
      commandBuffer.add(CreateEntity(entity, components));
      resume(entity)
    }
    def destroyEntityBuffered(entity) = {
      commandBuffer.add(DestroyEntity(entity));
      resume(())
    }
  }
}

def defaultWriteCommandBuffer() { prog: => Unit / writeCommandBuffer } = {
  try {
    prog();
  } with writeCommandBuffer {
    resume(())
  }
}

def defaultComponents() { prog: => Unit / Components[Unit] } = {
  val componentIds = resizableArray(0);
  try {
    prog();
  } with Components[Unit] {
    def getIds() = {
      resume(componentIds)
    }
    def iterTuplesRO(archId) = {
      resume { { prog } =>
        try {
          prog();
        } with read[Unit] {
          resume {
            ()
          }
        }
      }
    }
    def iterTuplesRW(archId) = {
      resume { { prog } =>
        try {
          prog();
        } with read[Unit] {
          resume {
            ()
          }
        } with emit[Unit] { value =>
          resume(())
        }
      }
    }
    def addComponentTuple(archId, value) = {
      println("addTuple for Unit Components makes no sense!");
      resume(0)
    }
    def removeSwapComponentTuple(archId, index) = {
      println("removeSwapTuple for Unit Components makes no sense!");
      resume(None())
    }
  }
}

def zipComponents1[
  A
]() { prog: => Unit / { Components[(
  A
)], CommandBuffer[(
  A
)], writeCommandBuffer } }: Unit / {
  EntityManager,
  writeCommandBuffer,
  nextEntityId,
  Component[A]
} = {
  val componentIds = resizableArray(1);
  componentIds.add(do getId[A]());
  try {
    with commandBuffer[(
      A
    )]();
    prog();
  } with Components[(
    A
  )] {
    def getIds() = {
      resume(componentIds)
    }
    def iterTuplesRO(archId) = {
      resume { { prog } =>
        with do iterRO[A](archId);
        try {
          prog();
        } with read[(
          A
        )] {
          resume {
            (
              do read[A]()
            )
          }
        }
      }
    }
    def iterTuplesRW(archId) = {
      resume { { prog } =>
        with do iterRW[A](archId);
        try {
          prog();
        } with read[(
          A
        )] {
          resume {
            (
              do read[A]()
            )
          }
        } with emit[(
          A
        )] { value =>
          value match {
            case a =>
              do emit(a);
          }
          resume(())
        }
      }
    }
    def addComponentTuple(archId, value) = {
      resume(
        value match {
          case a =>
            do addComponent(archId, a);
        }
      )
    }
    def removeSwapComponentTuple(archId, index) = {
      resume(
        do removeSwapComponent[A](archId, index)
      )
    }
  }
}

def zipComponents2[
  A,
  B
]() { prog: => Unit / { Components[(
  A,
  B
)], CommandBuffer[(
  A,
  B
)], writeCommandBuffer } }: Unit / {
  EntityManager,
  writeCommandBuffer,
  nextEntityId,
  Component[A],
  Component[B]
} = {
  val componentIds = resizableArray(2);
  componentIds.add(do getId[A]());
  componentIds.add(do getId[B]());
  componentIds.bubbleSortInt();
  try {
    with commandBuffer[(
      A,
      B
    )]();
    prog();
  } with Components[(
    A,
    B
  )] {
    def getIds() = {
      resume(componentIds)
    }
    def iterTuplesRO(archId) = {
      resume { { prog } =>
        with do iterRO[A](archId);
        with do iterRO[B](archId);
        try {
          prog();
        } with read[(
          A,
          B
        )] {
          resume {
            (
              do read[A](),
              do read[B]()
            )
          }
        }
      }
    }
    def iterTuplesRW(archId) = {
      resume { { prog } =>
        with do iterRW[A](archId);
        with do iterRW[B](archId);
        try {
          prog();
        } with read[(
          A,
          B
        )] {
          resume {
            (
              do read[A](),
              do read[B]()
            )
          }
        } with emit[(
          A,
          B
        )] { value =>
          value match {
            case (
              a,
              b
            ) =>
              do emit(a);
              do emit(b);
          }
          resume(())
        }
      }
    }
    def addComponentTuple(archId, value) = {
      resume(
        value match {
          case (
            a,
            b
          ) =>
            do addComponent(archId, a);
            do addComponent(archId, b)
        }
      )
    }
    def removeSwapComponentTuple(archId, index) = {
      do removeSwapComponent[A](archId, index);
      resume(
        do removeSwapComponent[B](archId, index)
      )
    }
  }
}

def zipComponents3[
  A,
  B,
  C
]() { prog: => Unit / { Components[(
  A,
  B,
  C
)], CommandBuffer[(
  A,
  B,
  C
)], writeCommandBuffer } }: Unit / {
  EntityManager,
  writeCommandBuffer,
  nextEntityId,
  Component[A],
  Component[B],
  Component[C]
} = {
  val componentIds = resizableArray(3);
  componentIds.add(do getId[A]());
  componentIds.add(do getId[B]());
  componentIds.add(do getId[C]());
  componentIds.bubbleSortInt();
  try {
    with commandBuffer[(
      A,
      B,
      C
    )]();
    prog();
  } with Components[(
    A,
    B,
    C
  )] {
    def getIds() = {
      resume(componentIds)
    }
    def iterTuplesRO(archId) = {
      resume { { prog } =>
        with do iterRO[A](archId);
        with do iterRO[B](archId);
        with do iterRO[C](archId);
        try {
          prog();
        } with read[(
          A,
          B,
          C
        )] {
          resume {
            (
              do read[A](),
              do read[B](),
              do read[C]()
            )
          }
        }
      }
    }
    def iterTuplesRW(archId) = {
      resume { { prog } =>
        with do iterRW[A](archId);
        with do iterRW[B](archId);
        with do iterRW[C](archId);
        try {
          prog();
        } with read[(
          A,
          B,
          C
        )] {
          resume {
            (
              do read[A](),
              do read[B](),
              do read[C]()
            )
          }
        } with emit[(
          A,
          B,
          C
        )] { value =>
          value match {
            case (
              a,
              b,
              c
            ) =>
              do emit(a);
              do emit(b);
              do emit(c);
          }
          resume(())
        }
      }
    }
    def addComponentTuple(archId, value) = {
      resume(
        value match {
          case (
            a,
            b,
            c
          ) =>
            do addComponent(archId, a);
            do addComponent(archId, b);
            do addComponent(archId, c)
        }
      )
    }
    def removeSwapComponentTuple(archId, index) = {
      do removeSwapComponent[A](archId, index);
      do removeSwapComponent[B](archId, index);
      resume(
        do removeSwapComponent[C](archId, index)
      )
    }
  }
}

def zipComponents4[
  A,
  B,
  C,
  D
]() { prog: => Unit / { Components[(
  A,
  B,
  C,
  D
)], CommandBuffer[(
  A,
  B,
  C,
  D
)], writeCommandBuffer } }: Unit / {
  EntityManager,
  writeCommandBuffer,
  nextEntityId,
  Component[A],
  Component[B],
  Component[C],
  Component[D]
} = {
  val componentIds = resizableArray(4);
  componentIds.add(do getId[A]());
  componentIds.add(do getId[B]());
  componentIds.add(do getId[C]());
  componentIds.add(do getId[D]());
  componentIds.bubbleSortInt();
  try {
    with commandBuffer[(
      A,
      B,
      C,
      D
    )]();
    prog();
  } with Components[(
    A,
    B,
    C,
    D
  )] {
    def getIds() = {
      resume(componentIds)
    }
    def iterTuplesRO(archId) = {
      resume { { prog } =>
        with do iterRO[A](archId);
        with do iterRO[B](archId);
        with do iterRO[C](archId);
        with do iterRO[D](archId);
        try {
          prog();
        } with read[(
          A,
          B,
          C,
          D
        )] {
          resume {
            (
              do read[A](),
              do read[B](),
              do read[C](),
              do read[D]()
            )
          }
        }
      }
    }
    def iterTuplesRW(archId) = {
      resume { { prog } =>
        with do iterRW[A](archId);
        with do iterRW[B](archId);
        with do iterRW[C](archId);
        with do iterRW[D](archId);
        try {
          prog();
        } with read[(
          A,
          B,
          C,
          D
        )] {
          resume {
            (
              do read[A](),
              do read[B](),
              do read[C](),
              do read[D]()
            )
          }
        } with emit[(
          A,
          B,
          C,
          D
        )] { value =>
          value match {
            case (
              a,
              b,
              c,
              d
            ) =>
              do emit(a);
              do emit(b);
              do emit(c);
              do emit(d);
          }
          resume(())
        }
      }
    }
    def addComponentTuple(archId, value) = {
      resume(
        value match {
          case (
            a,
            b,
            c,
            d
          ) =>
            do addComponent(archId, a);
            do addComponent(archId, b);
            do addComponent(archId, c);
            do addComponent(archId, d)
        }
      )
    }
    def removeSwapComponentTuple(archId, index) = {
      do removeSwapComponent[A](archId, index);
      do removeSwapComponent[B](archId, index);
      do removeSwapComponent[C](archId, index);
      resume(
        do removeSwapComponent[D](archId, index)
      )
    }
  }
}

def createResource[T](value: T) { prog: => Unit / Resource[T] } = {
  var resourceValue = value;
  try {
    prog();
  } with Resource[T] {
    def getResource() = {
      resume(resourceValue)
    }
    def setResource(value: T) = {
      resourceValue = value;
      resume(())
    }
  }
}

def archManager() { prog: => Unit / ArchManager } = {
  val archs = resizableArray(4);
  val freeIndices = resizableArray(4);
  var hasChanged = false;
  var updateQueries = resizableArray(4);
  def addArch(componentIds: ResizableArray[Int]) = {
    hasChanged = true;
    val arch = Arch(componentIds, resizableArray(4));
    try {
      archs.unsafeSet(freeIndices.popRight(), arch);
    } with Exception[OutOfBounds] {
      def raise(_: OutOfBounds, _: String) = {
        ()
      }
    }
    archs.add(arch);
  }
  def removeArch(archId: Int) = {
    if (archId < archs.size()) {
      hasChanged = true;
      archs.unsafeSet(archId, Arch(resizableArray(0), resizableArray(0)));
      freeIndices.add(archId);
      ()
    }
  }
  def updateFindArchs(componentIds: ResizableArray[Int], withoutIds: ResizableArray[Int], archIds: Ref[ResizableArray[Int]]) = {
    val newArchIds = resizableArray(4);
    archs.foreachIndex() { (archId, arch) { l } =>
      var findIndex = 0;
      var findWithoutIndex = 0;
      var foundWithout = false;
      arch.componentIds.foreach() { (componentId) { sl } =>
        if (findIndex >= componentIds.size() && findWithoutIndex >= withoutIds.size()) {
          sl.break();
        }
        while (findWithoutIndex < withoutIds.size() && withoutIds.unsafeGet(findWithoutIndex) < componentId) {
          findWithoutIndex = findWithoutIndex + 1;
        }
        if (findWithoutIndex < withoutIds.size() && withoutIds.unsafeGet(findWithoutIndex) == componentId) {
          foundWithout = true;
          sl.break();
        }
        val searchId = componentIds.unsafeGet(findIndex);
        if (componentId > searchId) {
          l.continue();
        }
        if (componentId == searchId) {
          findIndex = findIndex + 1;
        }
      }
      if (findIndex == componentIds.size() && not(foundWithout)) {
        newArchIds.add(archId);
        ()
      }
    }
    archIds.set(newArchIds);
  }
  try {
    prog();
  } with ArchManager {
    /*
    def addArch(componentIds) = {
      var archId = -1;
      archs.componentIds.foreachIndex() { (id, arch) { l } =>
        if (arch.size() != componentIds.size()) {
          l.continue();
        }
        each(0, arch.size()) { index =>
          if (arch.unsafeGet(index) != componentIds.unsafeGet(index)) {
            l.continue();
          }
        }
        archId = id;
        l.break();
      }
      if (archId < 0) {
        archId = addArch(componentIds);
      }
      resume(archId)
    }
    def removeArch(archId) = {
      removeArch(archId);
      resume(())
    }
    */
    def addUpdateQuery(componentIds, withoutIds, archIds) = {
      updateQueries.add((componentIds, withoutIds, archIds));
      resume(())
    }
    def updateQueries() = {
      if (hasChanged) {
        updateQueries.foreach() { value =>
          value match {
            case (componentIds, withoutIds, archIds) => {
              updateFindArchs(componentIds, withoutIds, archIds);
            }
          }
        }
        hasChanged = false;
      }
      resume(())
    }
    def iterEntitiesRO(archId) = {
      resume { { prog } =>
        val entities = archs.unsafeGet(archId).entities;
        var index = 0;
        try {
          prog();
        } with read[Entity] {
          resume {
            if (index < entities.size()) {
              val entity = entities.unsafeGet(index);
              index = index + 1;
              entity
            } else {
              do stop()
            }
          }
        }
      }
    }
    /*
    def addEntity(archId, entity) = {
      val entities = archs.unsafeGet(archId).entities;
      val index = entities.size();
      entities.add(entity);
      resume(index)
    }
    */
    def addEntity(componentIds, entity) = {
      var archId = -1;
      archs.foreachIndex() { (id, arch) { l } =>
        if (arch.componentIds.size() != componentIds.size()) {
          l.continue();
        }
        each(0, arch.componentIds.size()) { index =>
          if (arch.componentIds.unsafeGet(index) != componentIds.unsafeGet(index)) {
            l.continue();
          }
        }
        archId = id;
        l.break();
      }
      if (archId < 0) {
        archId = addArch(componentIds);
      }
      archs.unsafeGet(archId).entities.add(entity);
      resume(archId)
    }
    def removeSwapEntity(archId, index) = {
      val entities = archs.unsafeGet(archId).entities;
      val swapped = entities.removeSwap(index);
      if (entities.size() == 0) {
        removeArch(archId);
      }
      resume(swapped)
    }
    def getEntity(archId, index) = {
      resume(archs.unsafeGet(archId).entities.unsafeGet(index))
    }
  }
}

def entityIdManager() { prog: => Unit / nextEntityId } = {
  var lastEntityId = 0;
  try {
    prog();
  } with nextEntityId {
    lastEntityId = lastEntityId + 1;
    resume(lastEntityId)
  }
}

def entityManager() { prog: => Unit / EntityManager }: Unit / { ArchManager, nextEntityId } = {
  val entityDatas: Map[Entity, EntityData] = emptyMap();
  try {
    prog();
  } with EntityManager {
    def createEntity[T](components) = {
      resume {
        val entity = Entity(do nextEntityId());      
        val archId = do addEntity(do getIds[T](), entity);
        val componentIndex = do addComponentTuple(archId, components);
        val entityData = EntityData(archId, componentIndex);
        entityDatas.update(entity, entityData);
        entity
      }
    }
    def createEntityComponents[T](entity, components) = {
      resume {
        val archId = do addEntity(do getIds[T](), entity);
        val componentIndex = do addComponentTuple(archId, components);
        val entityData = EntityData(archId, componentIndex);
        entityDatas.update(entity, entityData);
      }
    }
    def destroyEntity[T](entity) = {
      resume {
        entityDatas.get(entity) match {
          case Some(entityData) =>
            entityDatas.delete(entity);
            do removeSwapComponentTuple[T](entityData.archId, entityData.componentIndex) match {
              case Some(swapped) =>
                val swappedEntity = do getEntity(entityData.archId, swapped);
                entityDatas.update(swappedEntity, entityData);
              case None() => ()
            }
            do removeSwapEntity(entityData.archId, entityData.componentIndex);
            ()
          case None() => println("Trying to remove nonexistent Entity with id " ++ entity.id.show() ++ "!");
        }
        ()
      }
    }
    def getComponent[T](entity) = {
      resume {
        val (archId, componentIndex) = entityDatas.get(entity) match {
          case Some(EntityData(archId, componentIndex)) => (archId, componentIndex)
          case None() => panic("Trying to get component of nonexistent Entity with id " ++ entity.id.show() ++ "! Maybe it's in a CommandBuffer and not yet existent?")
        };
        do getComponent[T](archId, componentIndex)
      }
    }
    def setComponent[T](entity, value) = {
      resume {
        val (archId, componentIndex) = entityDatas.get(entity) match {
          case Some(EntityData(archId, componentIndex)) => (archId, componentIndex)
          case None() => panic("Trying to get component of nonexistent Entity with id " ++ entity.id.show() ++ "! Maybe it's in a CommandBuffer and not yet existent?")
        };
        do setComponent[T](archId, componentIndex, value);
      }
    }
  }
}

def systemEntityManager() { prog: => Unit / EntityManager }: Unit / EntityManager = {
  try {
    prog();
  } with EntityManager {
    def createEntity[T](components) = {
      resume {
        do createEntityBuffered(components)
      }
    }
    def createEntityComponents[T](entity, components) = {
      panic("Cannot createEntityComponents inside systemEntityManager!");
    }
    def destroyEntity[T](entity) = {
      resume {
        do destroyEntityBuffered[T](entity);
      }
    }
    def getComponent[T](entity) = {
      resume {
        do getComponent(entity)
      }
    }
    def setComponent[T](entity, value) = {
      resume {
        do setComponent(entity, value);
      }
    }
  }
}

def query[T, With, Without]()
{ prog: => Unit / Query[T, With, Without] }: Unit / {
  ArchManager, Components[T], Components[With], Components[Without]
} = {
  val componentIds = dedupMergeInt(do getIds[T](), do getIds[With]());
  val withoutIds = do getIds[Without]();
  val archIds = ref(resizableArray(0));
  do addUpdateQuery(componentIds, withoutIds, archIds);
  try {
    prog();
  } with Query[T, With, Without] {
    def foreachRO() = {
      resume { { action } =>
        archIds.get().foreach() { archId =>
          try {
            with do iterTuplesRO[T](archId);
            loop {
              action(do read());
            }
          } with stop {
            ()
          }
        }
      }
    }
    def foreachRW() = {
      resume { { action } =>
        archIds.get().foreach() { archId =>
          try {
            with do iterTuplesRW[T](archId);
            loop {
              do emit(action(do read()));
            }
          } with stop {
            ()
          }
        }
      }
    }
    def foreachEntityRO() = {
      resume { { action } =>
        archIds.get().foreach() { archId =>
          try {
            with do iterEntitiesRO(archId);
            with do iterTuplesRO[T](archId);
            loop {
              action(do read(), do read());
            }
          } with stop {
            ()
          }
        }
      }
    }
    def foreachEntityRW() = {
      resume { { action } =>
        archIds.get().foreach() { archId =>
          try {
            with do iterEntitiesRO(archId);
            with do iterTuplesRW[T](archId);
            loop {
              do emit(action(do read(), do read()));
            }
          } with stop {
            ()
          }
        }
      }
    }
  }
}

def defaultSystem() { prog: => Unit / System } = {
  try {
    prog();
  } with System {
    def step() = {
      resume {
        ()
      }
    }
  }
}

def addSystem[T, With, Without]()
{ body: => Unit / { Query[T, With, Without], EntityManager } }
{ prog: => Unit / System }: Unit / {
  ArchManager, System, Components[T], Components[With], Components[Without]
} = {
  with query[T, With, Without]();
  try {
    prog();
  } with System {
    def step() = {
      resume {
        do step();
        body();
      }
    }
  }
}

def world() { prog: => Unit / {
  nextComponentId, nextEntityId, ArchManager, EntityManager, Components[Unit], writeCommandBuffer, System, World
} } = {
  with componentIdManager();
  with entityIdManager();
  with archManager();
  with entityManager();
  with defaultComponents();
  with defaultWriteCommandBuffer();
  with defaultSystem();
  def stepWorld() { writeCommandBuffer: => Unit } = {
    do updateQueries();
    systemEntityManager() {
      do step();
    };
    writeCommandBuffer();
  }
  try {
    prog();
  } with World {
    def stepWorld() = {
      resume {
        stepWorld() {
          do writeCommandBuffer();
        };
      }
    }
    def runWorld() = {
      resume {
        loop { { l } =>
          if (isInputEscape()) {
            l.break();
          }
          await(promise(box { wait(0) } ));
          stepWorld() {
            do writeCommandBuffer();
          };
        }
      }
    }
  }
}