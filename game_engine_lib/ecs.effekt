module ecs

import array
import resizable_array
import mutable/map
import io
import io/time
import stream

import game_engine_lib/core

record Entity(id: Int, index: Int)

record EntityData(archId: Int, entityIndex: Int)

record ComponentStore[T](value: Ref[OptionArray[T]])

record Arch(componentIndices: Map[Int, ResizableArray[Int]], entities: ResizableArray[Entity])

// Resource to signal world loop exit
record RunWorld(run: Bool)

type UntypedComponentStore {
  UntypedComponentStore[T](componentStore: ComponentStore[T])
}

type SetComponentOp {
  SetComponentOp[T](entity: Entity, value: T, componentId: Int, componentStore: ComponentStore[T])
}

type SystemEntityOp {
  SystemCreateEntity(entity: Entity)
  SystemDestroyEntity(entity: Entity)
  SystemSetComponent(op: SetComponentOp)
  SystemRemoveComponent(entity: Entity, componentId: Int)
}

interface EcsException {
  def invalidEntity(entity: Entity): Nothing
  def invalidComponent(entity: Entity, componentId: Int): Nothing
}

interface ComponentManager {
  def internalRegisterComponentStore[T](componentStore: ComponentStore[T]): Int
  def internalRemoveComponent(componentId: Int, index: Int): Unit
}

interface Component[T] {
  def getComponentId(): Int
  def internalAddComponent(value: T): Int
  def internalSetComponent(index: Int, value: T): Unit
  def internalGetComponent(index: Int): T
  def internalGetComponentStore(): ComponentStore[T]
  def internalCreateSetComponentOp(entity: Entity, value: T): SetComponentOp
}

interface Resource[T] {
  def getResource(): T
  def setResource(value: T): Unit
}

interface ArchManager {
  def internalHasComponent(archId: Int, componentId: Int): Bool
  def internalAddEntity(entity: Entity): EntityData
  def internalRemoveSwapEntity(entityData: EntityData): Option[Entity]
  def internalGetComponent[T](entityData: EntityData): Option[T] / Component[T]
  def internalSetComponent[T](entityData: EntityData, value: T, componentId: Int, componentStore: ComponentStore[T]): Option[(EntityData, Option[Entity])]
  def internalAddExistingComponent(entityData: EntityData, componentId: Int, componentIndex: Int): (EntityData, Option[Entity])
  def internalRemoveComponent(entityData: EntityData, componentId: Int): (EntityData, Option[Entity])
  def internalIterEntitiesArchIdsEntityIndices(archIds: ResizableArray[Int], iterAll: Bool) { prog: => Unit / read[(Entity, Int, Int)] }: Unit / stop
  def internalGetComponentIndices(archId: Int, componentId: Int): Option[ResizableArray[Int]]
  def internalGetQueryArchIds(withIds: Map[Int, Unit], withoutIds: Map[Int, Unit], lastChangeVersion: Int): Option[(ResizableArray[Int], Int)]
}

interface EntityIdManager {
  def internalNextEntityId(): Int
  def invalidEntityId(): Int
}

interface EntityManager {
  def hasEntity(entity: Entity): Bool
  def hasComponent[T](entity: Entity): Bool / { Component[T], EcsException }
  def getEntityData(entity: Entity): EntityData / EcsException
  def createEntity(): Entity
  def destroyEntity(entity: Entity): Unit / EcsException
  def removeComponent[T](entity: Entity): Unit / { Component[T], EcsException }
  def getComponent[T](entity: Entity): T / { Component[T], EcsException }
  def setComponent[T](entity: Entity, value: T): Unit / { Component[T], EcsException }
  def internalGetEntityDatas(): OptionArray[(Entity, EntityData)]
}

interface Query {
  def addC[T]() { prog: { iter: CompIter[T] } => Unit }: Unit / Component[T]
  def addOptC[T]() { prog: { iter: CompIter[Option[T]] } => Unit }: Unit / Component[T]
  def withC[T](): Unit / Component[T]
  def withoutC[T](): Unit / Component[T]
  def foreach() { action: Entity => Unit }: Unit
}

interface CompIter[T] {
  def get(): T
  def set(value: T): Unit
}

interface System {
  def internalStep(): Unit / EntityManager
}

interface World {
  def stepWorld(): Unit / System
  def runWorld(): Unit / System
}

def invalid(): Entity = Entity(0, 0)

def componentStore[T](): ComponentStore[T] = {
  ComponentStore(ref(optionArray(4)))
}

def addComp[T](componentStore: ComponentStore[T], value: T): Int = {
  componentStore.value.get().add(value)
}

def removeComp[T](componentStore: ComponentStore[T], index: Int): Unit = {
  componentStore.value.get().remove(index)
}

def setComp[T](componentStore: ComponentStore[T], index: Int, value: T): Unit = {
  componentStore.value.get().unsafeSet(index, value)
}

def getComp[T](componentStore: ComponentStore[T], index: Int): T = {
  componentStore.value.get().unsafeGet(index)
}

def panicOnEcsException() { prog: => Unit / EcsException }: Unit = {
  try {
    prog();
  } with EcsException{
    def invalidEntity(entity) = {
      println("Invalid Entity:");
      inspect(entity);
      panic("");
    }
    def invalidComponent(entity, componentId) = {
      println("Invalid ComponentId: " ++ componentId.show());
      println("On Entity:");
      inspect(entity);
      panic("");
    }
  }
}

def ignoreEcsException() { prog: => Unit / EcsException }: Unit = {
  try {
    prog();
  } with EcsException{
    def invalidEntity(entity) = {
      ()
    }
    def invalidComponent(entity, componentId) = {
      ()
    }
  }
}

def componentManager() { prog: => Unit / ComponentManager }: Unit = {
  var untypedComponentStores = resizableArray(4);
  try {
    prog();
  } with ComponentManager {
    def internalRegisterComponentStore[T](componentStore) = {
      untypedComponentStores.add(UntypedComponentStore(componentStore));
      resume(untypedComponentStores.size() - 1)
    }
    def internalRemoveComponent(componentId, index) = {
      untypedComponentStores.unsafeGet(componentId) match {
        case UntypedComponentStore(componentStore) => componentStore.removeComp(index)
      }
      resume(())
    }
  }
}

def component[T]() { prog: => Unit / Component[T] }: Unit / ComponentManager = {
  val componentStore = componentStore();
  val componentId = do internalRegisterComponentStore(componentStore);
  try {
    prog();
  } with Component[T] {
    def getComponentId() = {
      resume(componentId)
    }
    def internalAddComponent(value) = {
      resume(componentStore.addComp(value))
    }
    def internalSetComponent(index, value) = {
      componentStore.setComp(index, value);
      resume(())
    }
    def internalGetComponent(index) = {
      resume(componentStore.getComp(index))
    }
    def internalGetComponentStore() = {
      resume(componentStore)
    }
    def internalCreateSetComponentOp(entity, value) = {
      resume(SetComponentOp(entity, value, componentId, componentStore))
    }
  }
}

def createResource[T](value: T) { prog: => Unit / Resource[T] }: Unit = {
  var resourceValue = value;
  try {
    prog();
  } with Resource[T] {
    def getResource() = {
      resume(resourceValue)
    }
    def setResource(value) = {
      resourceValue = value;
      resume(())
    }
  }
}

def archManager() { prog: => Unit / ArchManager }: Unit / ComponentManager = {
  var archs = optionArray(4);
  archs.add(Arch(emptyMap(), resizableArray(4)));
  var changeVersion = 1;
  def addArch(arch: Arch): Int = {
    changeVersion = changeVersion + 1;
    archs.add(arch)
  }
  def removeArch(archId: Int) = {
    changeVersion = changeVersion + 1;
    archs.remove(archId);
  }
  def getMatchingArchId(componentIds: Array[Int]): Option[Int] = {
    var matching = None();
    archs.arr.foreachIndex() { (i, archOpt) { l } =>
      archOpt.map() { arch =>
        if (arch.componentIndices.containsOnlyAllKeys(componentIds)) {
          matching = Some(i);
          l.break();
        }
        ()
      }
      ()
    };
    matching
  }
  def removeSwapEntityIndices(arch: Arch, entityIndex: Int): Option[Entity] = {
    val swapped = arch.entities.removeSwap(entityIndex).map() { index =>
      arch.entities.unsafeGet(index)
    };
    arch.componentIndices.values().foreach() { indices =>
      indices.removeSwap(entityIndex);
      ()
    };
    swapped
  }
  def addExistingComponent(entityData: EntityData, componentId: Int, componentIndex: Int): (EntityData, Option[Entity]) = {
    val oldArch = archs.unsafeGet(entityData.archId);
    var newCompIndices = emptyMap();
    oldArch.componentIndices.keys().foreach() { (compId) { l } =>
      newCompIndices.update(compId, resizableArray(0));
    };
    newCompIndices.update(componentId, resizableArray(0));
    val newArchId = getMatchingArchId(newCompIndices.keys()).getOrElse() {
      addArch(Arch(newCompIndices, resizableArray(4)))
    };
    val newArch = archs.unsafeGet(newArchId);
    val newEntityIndex = newArch.entities.add(oldArch.entities.unsafeGet(entityData.entityIndex));
    oldArch.componentIndices.keys().foreach() { compId =>
      newArch.componentIndices.unsafeGet(compId).add(oldArch.componentIndices.unsafeGet(compId).unsafeGet(entityData.entityIndex));
      ()
    };
    newArch.componentIndices.unsafeGet(componentId).add(componentIndex);
    val swapped = oldArch.removeSwapEntityIndices(entityData.entityIndex);
    if (entityData.archId > 0 && oldArch.entities.size() == 0) {
      removeArch(entityData.archId);
    }
    (
      EntityData(newArchId, newEntityIndex),
      swapped
    )
  }
  try {
    prog();
  } with ArchManager {
    def internalHasComponent(archId, componentId) = {
      resume(archs.unsafeGet(archId).componentIndices.get(componentId).isDefined())
    }
    def internalAddEntity(entity) = {
      resume(EntityData(0, archs.unsafeGet(0).entities.add(entity)))
    }
    def internalRemoveSwapEntity(entityData) = {
      val arch = archs.unsafeGet(entityData.archId);
      arch.componentIndices.keys().foreach() { compId =>
        val compIndex = arch.componentIndices.unsafeGet(compId).unsafeGet(entityData.entityIndex);
        do internalRemoveComponent(compId, compIndex);
      };
      val swapped = arch.removeSwapEntityIndices(entityData.entityIndex);
      if (entityData.archId > 0 && arch.entities.size() == 0) {
        removeArch(entityData.archId);
      }
      resume(swapped)
    }
    def internalGetComponent[T](entityData) = {
      resume {
        val compId = do getComponentId[T]();
        archs.unsafeGet(entityData.archId).componentIndices.get(compId).map() { compIndices =>
          val compIndex = compIndices.unsafeGet(entityData.entityIndex);
          do internalGetComponent(compIndex)
        }
      }
    }
    def internalSetComponent[T](entityData, value: T, componentId: Int, componentStore: ComponentStore[T]) = {
      val result = archs.unsafeGet(entityData.archId).componentIndices.get(componentId) match {
        case Some(compIndices) => {
          val compIndex = compIndices.unsafeGet(entityData.entityIndex);
          componentStore.setComp(compIndex, value);
          None()
        }
        case None() => {
          val compIndex = componentStore.addComp(value);
          Some(addExistingComponent(entityData, componentId, compIndex));
        }
      }
      resume(result)
    }
    def internalAddExistingComponent(entityData, componentId, componentIndex) = {
      resume(addExistingComponent(entityData, componentId, componentIndex))
    }
    def internalRemoveComponent(entityData, componentId) = {
      val oldArch = archs.unsafeGet(entityData.archId);
      val newCompIndices = emptyMap();
      var sameArch = true;
      oldArch.componentIndices.keys().foreach() { compId =>
        if (compId == componentId) {
          sameArch = false;
        } else {
          newCompIndices.update(compId, resizableArray(0));
        }
      };
      if (sameArch) {
        resume((
          entityData,
          None()
        ))
      } else {
        val newCompIds = newCompIndices.keys();
        val newArchId = getMatchingArchId(newCompIds).getOrElse() {
          addArch(Arch(newCompIndices, resizableArray(4)))
        };
        val newArch = archs.unsafeGet(newArchId);
        val newEntityIndex = newArch.entities.add(oldArch.entities.unsafeGet(entityData.entityIndex));
        newCompIds.foreach() { compId =>
          newArch.componentIndices.unsafeGet(compId).add(oldArch.componentIndices.unsafeGet(compId).unsafeGet(entityData.entityIndex));
          ()
        };
        do internalRemoveComponent(componentId, oldArch.componentIndices.unsafeGet(componentId).unsafeGet(entityData.entityIndex));
        val swapped = oldArch.removeSwapEntityIndices(entityData.entityIndex);
        if (entityData.archId > 0 && oldArch.entities.size() == 0) {
          removeArch(entityData.archId);
        }
        resume((
          EntityData(newArchId, newEntityIndex),
          swapped
        ))
      }
    }
    def internalIterEntitiesArchIdsEntityIndices(archIds, iterAll) = {
      resume { { prog } =>
        if (archIds.size() == 0 && not(iterAll)) {
          try {
            prog();
          } with read[(Entity, Int, Int)] {
            do stop()
          }
        }
        var archIndex = 0;
        var archId = archIds.unsafeGet(archIndex);
        var entities = if (iterAll) {
          archs.unsafeGet(archIndex).entities
        } else {
          archs.unsafeGet(archId).entities
        };
        var index = 0;
        try {
          prog();
        } with read[(Entity, Int, Int)] {
          resume {
            while (index >= entities.size()) {
              index = 0;
              if (iterAll) {
                loop { { l } =>
                  archIndex = archIndex + 1;
                  if (archIndex >= archs.size()) {
                    do stop()
                  } else {
                    entities = archs.get(archIndex).map() { arch =>
                      arch.entities
                    }.getOrElse() {
                      l.continue();
                      panic("");
                    };
                    l.break();
                  }
                }
              } else {
                archIndex = archIndex + 1;
                if (archIndex >= archIds.size()) {
                  do stop()
                } else {
                  archId = archIds.unsafeGet(archIndex);
                  entities = archs.unsafeGet(archId).entities;
                }
              }
            }
            val entityIndex = index;
            index = index + 1;
            (entities.unsafeGet(entityIndex), archId, entityIndex)
          }
        }
      }
    }
    def internalGetComponentIndices(archId, componentId) = {
      resume(archs.unsafeGet(archId).componentIndices.get(componentId))
    }
    def internalGetQueryArchIds(withIds, withoutIds, lastChangeVersion) = {
      var result = None();
      if (lastChangeVersion < changeVersion) {
        var matching = resizableArray(4);
        archs.arr.foreachIndex() { (i, archOpt) =>
          archOpt.map() { arch =>
            val archCompIds = arch.componentIndices;
            if (archCompIds.containsAllKeys(withIds.keys()) && archCompIds.containsNoKeys(withoutIds.keys())) {
              matching.add(i);
              ()
            }
          };
          ()
        };
        result = Some((matching, changeVersion));
      }
      resume(result)
    }
  }
}

def entityIdManager() { prog: => Unit / EntityIdManager }: Unit = {
  var lastEntityId = 0;
  try {
    prog();
  } with EntityIdManager {
    def internalNextEntityId() = {
      lastEntityId = lastEntityId + 1;
      resume(lastEntityId)
    }
    def invalidEntityId() = {
      resume(0)
    }
  }
}

def getEntityData(entityDatas: OptionArray[(Entity, EntityData)], entity: Entity): EntityData / EcsException = {
  entityDatas.get(entity.index).map() { value =>
    if (entity.id == value.first.id) {
      value.second
    } else {
      do invalidEntity(entity);
    }
  }.getOrElse() {
    do invalidEntity(entity);
  }
}

def applySetComponentOp(op: SetComponentOp, entityDatas: OptionArray[(Entity, EntityData)]): Unit / ArchManager = {
  with ignoreEcsException();
  op match {
    case SetComponentOp(entity, value, componentId, componentStore) => {
      val entityData = entityDatas.getEntityData(entity);
      (do internalSetComponent(entityData, value, componentId, componentStore)).map() { result =>
        val (newEntityData, swapped) = result;
        entityDatas.unsafeSet(entity.index, (entity, newEntityData));
        swapped.map() { swappedEntity =>
          entityDatas.unsafeSet(swappedEntity.index, (swappedEntity, entityData));
        };
      }
      ()
    }
  }
}

def entityManager() { prog: => Unit / EntityManager }: Unit / { ArchManager, EntityIdManager } = {
  var entityDatas: OptionArray[(Entity, EntityData)] = optionArray(4);
  try {
    prog();
  } with EntityManager {
    def hasEntity(entity) = {
      resume(entityDatas.get(entity.index).isDefined())
    }
    def hasComponent[T](entity) = {
      resume {
        val entityData = entityDatas.getEntityData(entity);
        do internalHasComponent(entityData.archId, do getComponentId[T]())
      }
    }
    def getEntityData(entity) = {
      resume {
        entityDatas.getEntityData(entity)
      }
    }
    def createEntity() = {
      val tempEntity = Entity(do internalNextEntityId(), 0);
      val index = entityDatas.add((tempEntity, EntityData(0, 0)));
      val entity = Entity(tempEntity.id, index);
      val entityData = do internalAddEntity(entity);
      entityDatas.unsafeSet(index, (entity, entityData));
      resume(entity)
    }
    def destroyEntity(entity) = {
      resume {
        val entityData = entityDatas.getEntityData(entity);
        do internalRemoveSwapEntity(entityData).map() { swappedEntity =>
          entityDatas.unsafeSet(swappedEntity.index, (swappedEntity, entityData));
        };
        entityDatas.remove(entity.index);
      }
    }
    def removeComponent[T](entity) = {
      resume {
        val compId = do getComponentId[T]();
        val entityData = entityDatas.getEntityData(entity);
        val (newEntityData, swapped) = do internalRemoveComponent(entityData, compId);
        entityDatas.unsafeSet(entity.index, (entity, newEntityData));
        swapped.map() { swappedEntity =>
          entityDatas.unsafeSet(swappedEntity.index, (swappedEntity, entityData));
        };
        ()
      }
    }
    def getComponent[T](entity) = {
      resume {
        val entityData = entityDatas.getEntityData(entity);
        (do internalGetComponent(entityData)).getOrElse() {
          do invalidComponent(entity, do getComponentId[T]());
        }
      }
    }
    def setComponent[T](entity, value) = {
      resume {
        applySetComponentOp(do internalCreateSetComponentOp(entity, value), entityDatas);
        ()
      }
    }
    def internalGetEntityDatas() = {
      resume(entityDatas)
    }
  }
}

def systemEntityManager(entityDatas: OptionArray[(Entity, EntityData)]) { prog: => Unit / EntityManager }: Unit / { ArchManager, EntityIdManager, EntityManager } = {
  var entityOps = empty();
  try {
    prog();
  } with EntityManager {
    def hasEntity(entity) = {
      resume(do hasEntity(entity))
    }
    def hasComponent[T](entity) = {
      resume{
        do hasComponent[T](entity)
      }
    }
    def getEntityData(entity) = {
      resume {
        do getEntityData(entity)
      }
    }
    def createEntity() = {
      val tempEntity = Entity(do internalNextEntityId(), 0);
      val index = entityDatas.add((Entity(do invalidEntityId(), 0), EntityData(0, 0)));
      val entity = Entity(tempEntity.id, index);
      resume(entity)
      entityOps = entityOps.addFront(SystemCreateEntity(entity));
    }
    def destroyEntity(entity) = {
      resume {
        ()
      }
      entityOps = entityOps.addFront(SystemDestroyEntity(entity));
    }
    def removeComponent[T](entity) = {
      var compId = 0;
      resume {
        compId = do getComponentId[T]();
      }
      entityOps = entityOps.addFront(SystemRemoveComponent(entity, compId));
    }
    def getComponent[T](entity) = {
      resume {
        do getComponent(entity)
      }
    }
    def setComponent[T](entity, value) = {
      var didSet = false;
      var setCompOp = None();
      resume {
        with ignoreEcsException();
        if (do hasComponent[T](entity)) {
          do setComponent(entity, value);
          didSet = true;
        } else {
          setCompOp = Some(do internalCreateSetComponentOp(entity, value));
        }
      }
      if (not(didSet)) {
        setCompOp match {
          case Some(op) => entityOps = entityOps.addFront(SystemSetComponent(op))
          case None() => ()
        }
      }
    }
    def internalGetEntityDatas() = {
      resume(do internalGetEntityDatas())
    }
  };
  with panicOnEcsException();
  entityOps.foreach() { op =>
    op match {
      case SystemCreateEntity(entity) => {
        val entityData = do internalAddEntity(entity);
        entityDatas.unsafeSet(entity.index, (entity, entityData));
      }
      case SystemDestroyEntity(entity) => {
        do destroyEntity(entity);
      }
      case SystemRemoveComponent(entity, componentId) => {
        val entityData = do getEntityData(entity);
        val (newEntityData, swapped) = do internalRemoveComponent(entityData, componentId);
        entityDatas.unsafeSet(entity.index, (entity, newEntityData));
        swapped.map() { swappedEntity =>
          entityDatas.unsafeSet(swappedEntity.index, (swappedEntity, entityData));
        };
        ()
      }
      case SystemSetComponent(op) => applySetComponentOp(op, entityDatas)
    }
  };
}

def system()
{ body: => Unit / EntityManager }
{ prog: => Unit / System }: Unit /
{ System, ArchManager, EntityIdManager } = {
  try {
    prog();
  } with System {
    def internalStep() = {
      resume {
        do internalStep();
        systemEntityManager(do internalGetEntityDatas()) {
          body();
        };
      }
    }
  }
}

def defaultSystem() { prog: => Unit / System }: Unit = {
  try {
    prog();
  } with System {
    def internalStep() = {
      resume {
        ()
      }
    }
  }
}

def query() { prog: { query: Query } => Unit }: Unit / ArchManager = {
  var withIds = emptyMap();
  var withoutIds = emptyMap();
  var lastChangeVersion = 0;
  var matchingArchIds = resizableArray(0);
  var componentIndices = resizableArray(0);
  var optComponentIndices = resizableArray(0);
  var entityIndex = 0;
  try {
    prog() { q };
  } with q: Query {
    def addC[T]() = {
      resume { { prog } =>
        val compId = do getComponentId[T]();
        withIds.update(compId, ());
        val compIndices = ref(resizableArray(0));
        componentIndices.add((compId, compIndices));
        try {
          prog() { iter };
        } with iter: CompIter[T] {
          def get() = {
            resume(do internalGetComponent(compIndices.get().unsafeGet(entityIndex)))
          }
          def set(value) = {
            do internalSetComponent(compIndices.get().unsafeGet(entityIndex), value);
            resume(())
          }
        }
      }
    }
    def addOptC[T]() = {
      resume { { prog } =>
        val compId = do getComponentId[T]();
        val optCompIndices = ref(None());
        optComponentIndices.add((compId, optCompIndices));
        try {
          prog() { iter };
        } with iter: CompIter[Option[T]] {
          def get() = {
            val value = optCompIndices.get().map[ResizableArray[Int], T]() { ci =>
              do internalGetComponent(ci.unsafeGet(entityIndex))
            };
            resume(value)
          }
          def set(value) = {
            (optCompIndices.get(), value) match {
              case (Some(ci), Some(v)) => {
                do internalSetComponent(ci.unsafeGet(entityIndex), v);
              }
              case _ => ()
            };
            resume(())
          }
        }
      }
    }
    def withC[T]() = {
      resume {
        val compId = do getComponentId[T]();
        withIds.update(compId, ());
      }
    }
    def withoutC[T]() = {
      resume {
        val compId = do getComponentId[T]();
        withoutIds.update(compId, ());
      }
    }
    def foreach() = {
      resume { { action } =>
        (do internalGetQueryArchIds(withIds, withoutIds, lastChangeVersion)).map() { result =>
          matchingArchIds = result.first;
          lastChangeVersion = result.second;
        };
        try {
          with do internalIterEntitiesArchIdsEntityIndices(matchingArchIds, withIds.size() == 0);
          var currArchId = -1;
          loop {
            val entity = do read[(Entity, Int, Int)]() match {
              case (entity, archId, index) => {
                entityIndex = index;
                if (archId != currArchId) {
                  currArchId = archId;
                  componentIndices.foreach() { value =>
                    value match {
                      case (compId, compIndices) => {
                        do internalGetComponentIndices(archId, compId) match {
                          case Some(ci) => compIndices.set(ci)
                          case _ => ()
                        }
                      }
                    }
                  }
                  optComponentIndices.foreach() { value =>
                    value match {
                      case (compId, optCompIndices) => optCompIndices.set(do internalGetComponentIndices(archId, compId))
                    }
                  }
                }
                entity
              }
            };
            action(entity);
          };
        } with stop {
          ()
        }
      }
    }
  }
}

def world()
{ prog: => Unit /
  {
    Resource[RunWorld],
    ComponentManager, ArchManager, EntityIdManager, EntityManager,
    System,
    World
  }
}: Unit = {
  with createResource[RunWorld](RunWorld(true));
  with componentManager();
  with archManager();
  with entityIdManager();
  with entityManager();
  with defaultSystem();
  def stepWorld() = {
    do internalStep();
  }
  try {
    prog();
  } with World {
    def stepWorld() = {
      resume {
        stepWorld();
      }
    }
    def runWorld() = {
      resume {
        loop { { l } =>
          if (not((do getResource[RunWorld]()).run)) {
            l.break();
          }
          // TEMP: Slightly longer runtime before memory crash
          wait(10);
          //wait(0);
          stepWorld();
        }
      }
    }
  }
}
