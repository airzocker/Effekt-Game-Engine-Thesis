module ecs

import resizable_array
import mutable/map
import io
import io/time
import stream

import game_engine_lib/core
import game_engine_lib/engine

interface ArchStore[T] {
  def iterArch() { action: T => Unit }: Unit  
}

def archStore[T](entities: ResizableArray[T]) { prog: => Unit / ArchStore[T] } = {
  val store = resizableArray[T](4);
  try {
    prog();
  } with ArchStore[T] {
    def iterArch() = {
      resume { { action } =>
        foreach[T](store) { action }
      }
    }
  }
}

interface System {
  def step(): Unit
}

def defaultSystem() { prog: => Unit / System } = {
  try {
    prog();
  } with System {
    def step() = {
      resume(())
    }
  }
}

def addSystem() { body: => Unit } { prog: => Unit / System }: Unit / System = {
  try {
    prog();
  } with System {
    def step() = {
      do step();
      body();
      resume(())
    }
  }
}

interface World {
  def stepWorld(): Unit
  def runWorld(): Unit
}

def defaultWorld() { prog: => Unit / World }: Unit / System = {
  try {
    prog();
  } with World {
    def stepWorld() = {
      do step();
      resume(())
    }
    def runWorld() = {
      loop { { l } =>
        if (isInputEscape()) {
          l.break();
        }
        await(promise(box { wait(0) } ));
        do step();
      }
    }
  }
}