module renderer

import game_engine_lib/math
import game_engine_lib/core
import game_engine_lib/engine
import game_engine_lib/ecs

extern type CanvasRenderingContext2D

type Shape {
  Circle(color: Color);
  Rect(color: Color);
  Text(color: Color, text: String);
}

record WindowProperties(size: Vector2Int)
record Camera(transform: CameraTransform)

def canvasRenderer() { prog: => Unit / {
  Resource[Camera], Resource[WindowProperties], Components[(Transform, Shape)], System
} }: Unit / {
  Component[Transform], Component[Shape], Components[Unit], nextEntityId, System, ArchManager, EntityManager, World
} = {
  val context = jsGetContext();
  jsInitCanvas();
  with createResource[WindowProperties](getWindowProperties());
  with createResource[Camera](Camera(CameraTransform(
    zero(),
    0.0,
    10.0
  )));
  with zipComponents2[Transform, Shape]();
  with addSystem[(Transform, Shape), Unit, Prefab]() { { query } =>
    do setResource[WindowProperties](getWindowProperties());
    jsResetTransform(context);
    jsClearCanvas(context);
    jsTranslate(context, jsGetCanvasWidth().toDouble() / 2.0, jsGetCanvasHeight().toDouble() / 2.0);
    setCameraTransform(context, (do getResource[Camera]()).transform);
    query.foreachRO() { (entity, values) =>
      values match {
        case (transform, shape) => {
          jsSave(context);
          setTransform(context, transform);
          drawShape(context, shape);
          jsRestore(context);
        }
      }
      ()
    }
  };
  prog();
}

def getWindowProperties(): WindowProperties = {
  WindowProperties(Vector2Int(jsGetCanvasWidth(), jsGetCanvasHeight()))
}

def setTransform(context: CanvasRenderingContext2D, transform: Transform): Unit = {
  jsTranslate(context, transform.position.x, 0.0 - transform.position.y);
  jsScale(context, transform.scale.x, transform.scale.y);
  jsRotate(context, transform.rotation);
}

def setCameraTransform(context: CanvasRenderingContext2D, transform: CameraTransform): Unit = {
  jsRotate(context, 0.0 - transform.rotation);
  val screenScale = jsGetCanvasHeight().toDouble();
  jsScale(context, screenScale / transform.height, screenScale / transform.height);
  jsTranslate(context, 0.0 - transform.position.x, transform.position.y);
}

def drawShape(context: CanvasRenderingContext2D, shape: Shape): Unit = {
  shape match {
    case Circle(color) =>
      jsFillStyle(context, color.show());
      jsFillCircle(context);
    case Rect(color) =>
      jsFillStyle(context, color.show());
      jsFillRect(context);
    case Text(color, text) =>
      jsInitFont(context);
      jsFillStyle(context, color.show());
      jsFillText(context, text);
  }
}

extern io def jsInitCanvas(): Unit =
  js "initCanvas()"

extern pure def jsGetCanvasWidth(): Int =
  js "canvas.width"

extern pure def jsGetCanvasHeight(): Int =
  js "canvas.height"

extern pure def jsGetContext(): CanvasRenderingContext2D =
  js "canvas.getContext('2d')"

extern io def jsClearCanvas(context: CanvasRenderingContext2D): Unit =
  js "clearCanvas(${context})"

extern io def jsFillStyle(context: CanvasRenderingContext2D, color: String): Unit =
  js "(${context}).fillStyle = ${color}"

extern io def jsFillRect(context: CanvasRenderingContext2D): Unit =
  js "(${context}).fillRect(-0.5, -0.5, 1, 1)"

extern io def jsFillCircle(context: CanvasRenderingContext2D): Unit =
  js "fillCircle(${context})"

extern io def jsInitFont(context: CanvasRenderingContext2D): Unit =
  js "initFont(${context}, 1)"

extern io def jsFillText(context: CanvasRenderingContext2D, text: String): Unit =
  js "(${context}).fillText(${text}, 0, 0)"

extern io def jsTranslate(context: CanvasRenderingContext2D, x: Double, y: Double): Unit =
  js "(${context}).translate(${x}, ${y})"

extern io def jsRotate(context: CanvasRenderingContext2D, rotation: Double): Unit =
  js "(${context}).rotate(${rotation})"

extern io def jsScale(context: CanvasRenderingContext2D, x: Double, y: Double): Unit =
  js "(${context}).scale(${x}, ${y})"

extern io def jsResetTransform(context: CanvasRenderingContext2D): Unit =
  js "(${context}).resetTransform()"

extern io def jsSave(context: CanvasRenderingContext2D): Unit =
  js "(${context}).save()"

extern io def jsRestore(context: CanvasRenderingContext2D): Unit =
  js "(${context}).restore()"

extern js """
const canvas = document.getElementById('myCanvas');

function initCanvas() {
  window.addEventListener('resize', resizeCanvas);
  resizeCanvas();
}

function initFont(context, fontSize) {
  context.font = 'bold ' + fontSize + 'px sans';
  context.textAlign = 'center';
}

function fillCircle(context) {
  context.beginPath();
  context.arc(0, 0, 0.5, 0, 2 * Math.PI);
  context.fill();
}

function resizeCanvas() {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
}

function clearCanvas(context) {
  context.fillStyle = "rgb(0 0 0)";
  context.fillRect(0, 0, canvas.width, canvas.height);
  //context.clearRect(0, 0, canvas.width, canvas.height);
  //context.beginPath();
}
"""
