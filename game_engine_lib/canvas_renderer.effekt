module renderer

import game_engine_lib/math
import game_engine_lib/core
import game_engine_lib/engine
import game_engine_lib/ecs

extern type CanvasRenderingContext2D

type Shape {
  Circle(color: Color);
  Rect(color: Color);
  Text(color: Color, text: String);
}
record Camera(position: Vector2, rotation: Double, height: Double)
record WindowProperties(size: Vector2Int)

def canvasRenderer() { prog: => Unit / {
  Resource[Camera], Resource[WindowProperties],
  Component[Shape],
  System
} }: Unit / {
  Component[Position], Component[Rotation], Component[Scale],
  System, EntityIdManager,
  ComponentManager, ArchManager, EntityManager, World
} = {
  val context = jsGetContext();
  jsInitCanvas();
  jsInitFont(context);
  with component[Shape]();
  with createResource[WindowProperties](getWindowProperties());
  with createResource[Camera](Camera(
    zero(),
    0.0,
    10.0
  ));
  with def q = query[Position]();
  with def q = q.addOptC[Position, Unit, Unit, Rotation]() { q };
  with def q = q.addOptC[(Position, Option[Rotation]), Unit, Unit, Scale]() { q };
  with def q = q.addC[((Position, Option[Rotation]), Option[Scale]), Unit, Unit, Shape]() { q };
  with def query = q.buildQuery() { q };
  with system() {
    do setResource[WindowProperties](getWindowProperties());
    jsResetTransform(context);
    jsClearCanvas(context);
    jsTranslate(context, jsGetCanvasWidth().toDouble() / 2.0, jsGetCanvasHeight().toDouble() / 2.0);
    setCameraTransform(context, do getResource[Camera]());
    query.foreachRO() { (_, values) =>
      values match {
        case (((position, optRotation), optScale), shape) => {
          val rotation = optRotation.getOrElse() { default() };
          val scale = optScale.getOrElse() { default() };
          jsSave(context);
          setTransform(context, position.value, rotation.value, scale.value);
          drawShape(context, shape);
          jsRestore(context);
        }
      }
      ()
    }
  };
  prog();
}

def getWindowProperties(): WindowProperties = {
  WindowProperties(Vector2Int(jsGetCanvasWidth(), jsGetCanvasHeight()))
}

def setTransform(context: CanvasRenderingContext2D, position: Vector2, rotation: Double, scale: Vector2): Unit = {
  jsTranslate(context, position.x, 0.0 - position.y);
  jsRotate(context, rotation);
  jsScale(context, scale.x, scale.y);
}

def setCameraTransform(context: CanvasRenderingContext2D, camera: Camera): Unit = {
  jsRotate(context, 0.0 - camera.rotation);
  val screenScale = jsGetCanvasHeight().toDouble();
  jsScale(context, screenScale / camera.height, screenScale / camera.height);
  jsTranslate(context, 0.0 - camera.position.x, camera.position.y);
}

def drawShape(context: CanvasRenderingContext2D, shape: Shape): Unit = {
  shape match {
    case Circle(color) =>
      jsFillStyle(context, color.show());
      jsFillCircle(context);
    case Rect(color) =>
      jsFillStyle(context, color.show());
      jsFillRect(context);
    case Text(color, text) =>
      jsFillStyle(context, color.show());
      jsFillText(context, text);
  }
}

extern io def jsInitCanvas(): Unit =
  js "initCanvas()"

extern pure def jsGetCanvasWidth(): Int =
  js "canvas.width"

extern pure def jsGetCanvasHeight(): Int =
  js "canvas.height"

extern pure def jsGetContext(): CanvasRenderingContext2D =
  js "canvas.getContext('2d')"

extern io def jsClearCanvas(context: CanvasRenderingContext2D): Unit =
  js "clearCanvas(${context})"

extern io def jsFillStyle(context: CanvasRenderingContext2D, color: String): Unit =
  js "(${context}).fillStyle = ${color}"

extern io def jsFillRect(context: CanvasRenderingContext2D): Unit =
  js "(${context}).fillRect(-0.5, -0.5, 1, 1)"

extern io def jsFillCircle(context: CanvasRenderingContext2D): Unit =
  js "fillCircle(${context})"

extern io def jsInitFont(context: CanvasRenderingContext2D): Unit =
  js "initFont(${context}, 1)"

extern io def jsFillText(context: CanvasRenderingContext2D, text: String): Unit =
  js "(${context}).fillText(${text}, 0, 0.36)"

extern io def jsTranslate(context: CanvasRenderingContext2D, x: Double, y: Double): Unit =
  js "(${context}).translate(${x}, ${y})"

extern io def jsRotate(context: CanvasRenderingContext2D, rotation: Double): Unit =
  js "(${context}).rotate(${rotation})"

extern io def jsScale(context: CanvasRenderingContext2D, x: Double, y: Double): Unit =
  js "(${context}).scale(${x}, ${y})"

extern io def jsResetTransform(context: CanvasRenderingContext2D): Unit =
  js "(${context}).resetTransform()"

extern io def jsSave(context: CanvasRenderingContext2D): Unit =
  js "(${context}).save()"

extern io def jsRestore(context: CanvasRenderingContext2D): Unit =
  js "(${context}).restore()"

extern js """

let canvas = null;

function initCanvas() {
  document.head.innerHTML += `
    <style>
    html, body, canvas { padding: 0; margin: 0; }
    canvas { display:block; }
    </style>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Effekt Game Engine</title>
  `;
  document.body.innerHTML += `
    <canvas id="myCanvas" width="640" height="360"></canvas>
  `;
  canvas = document.getElementById('myCanvas');
  window.addEventListener('resize', resizeCanvas);
  resizeCanvas();
}

function initFont(context, fontSize) {
  context.font = 'bold ' + fontSize + 'px sans';
  context.textAlign = 'center';
}

function fillCircle(context) {
  context.beginPath();
  context.arc(0, 0, 0.5, 0, 2 * Math.PI);
  context.fill();
}

function resizeCanvas() {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
}

function clearCanvas(context) {
  context.fillStyle = "rgb(0 0 0)";
  context.fillRect(0, 0, canvas.width, canvas.height);
}

"""
