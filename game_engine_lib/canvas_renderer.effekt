module renderer

import game_engine_lib/math
import game_engine_lib/core
import game_engine_lib/engine
import game_engine_lib/ecs

extern type CanvasElement
extern type CanvasRenderingContext2D

type Shape {
  Circle(color: Color);
  Rectangle(color: Color);
  Text(color: Color, text: String);
}

record WindowProperties(size: Vector2Int)
record Camera(transform: Transform)

def canvasRenderer() { prog: => Unit }: Unit / {
  Resource[Camera], Component[Transform], Component[Shape], Components[Unit], nextEntityId, System, ArchManager, EntityManager, World
} = {
  val canvas = getCanvas()
  val context = canvas.getContext;
  // TODO: Read/Apply WindowProperties
  with zipComponents2[Transform, Shape]();
  with addSystem[(Transform, Shape), Unit, Prefab]() { { query } =>
    jsResetTransform(context);
    setTransform(context, (do getResource[Camera]()).transform);
    jsSave(context);
    query.foreachRO() { (_, values) =>
      values match {
        case (transform, shape) => {
          setTransform(context, transform);
          drawShape(context, shape);
          jsRestore(context);
        }
      }
      ()
    }
  };
  prog();
}

def setTransform(context: CanvasRenderingContext2D, transform: Transform): Unit = {
  jsTranslate(context, transform.position.x, transform.position.y);
  jsScale(context, transform.scale.x, transform.scale.y);
  jsRotate(context, transform.rotation);
}

// TODO
def drawShape(context: CanvasRenderingContext2D, shape: Shape): Unit = {
  shape match {
    case Circle(color) =>
      jsFillStyle(context, color.show());
      jsFillCircle(context);
    case Rectangle(color) =>
      jsFillStyle(context, color.show());
      jsFillRect(context);
    case Text(color, text) =>
      jsInitFont(context);
      jsFillStyle(context, color.show());
      jsFillText(context, text);
  }
}

extern io def clearCanvas(context: CanvasRenderingContext2D): Unit =
  js "clearCanvas(${context})"

extern io def resizeCanvas(): Unit =
  js "resizeCanvas()"

extern io def registerEvents(): Unit =
  js "registerEvents()"

extern pure def getCanvasWidth(): Int =
  js "getCanvasWidth()"

extern pure def getCanvasHeight(): Int =
  js "getCanvasHeight()"

extern pure def getCanvas(): CanvasElement =
  js "getCanvas()"

extern pure def getContext(canvas: CanvasElement): CanvasRenderingContext2D =
  js "(${canvas}).getContext('2d')"

extern io def jsFillStyle(context: CanvasRenderingContext2D, color: String): Unit =
  js "(${context}).fillStyle = ${color}"

extern io def jsFillRect(context: CanvasRenderingContext2D): Unit =
  js "(${context}).fillRect(0, 0, 1, 1)"

extern io def jsFillCircle(context: CanvasRenderingContext2D): Unit =
  js "fillCircle(${context}, 0, 0, 1)"

extern io def jsInitFont(context: CanvasRenderingContext2D): Unit =
  js "initFont(${context}, 1)"

extern io def jsFillText(context: CanvasRenderingContext2D, text: String): Unit =
  js "(${context}).fillText(${text}, 0, 0)"

extern io def jsTranslate(context: CanvasRenderingContext2D, x: Double, y: Double): Unit =
  js "(${context}).translate(${x}, ${y})"

extern io def jsRotate(context: CanvasRenderingContext2D, rotation: Double): Unit =
  js "(${context}).rotate(${rotation})"

extern io def jsScale(context: CanvasRenderingContext2D, x: Double, y: Double): Unit =
  js "(${context}).scale(${x}, ${y})"

extern io def jsResetTransform(context: CanvasRenderingContext2D): Unit =
  js "(${context}).resetTransform()"

extern io def jsSave(context: CanvasRenderingContext2D): Unit =
  js "(${context}).save()"

extern io def jsRestore(context: CanvasRenderingContext2D): Unit =
  js "(${context}).restore()"

extern js """

const canvas = document.getElementById('myCanvas');
let canvasWidth = 0;
let canvasHeight = 0;

function getCanvas() {
  return canvas;
}

function initFont(ctx, fontSize) {
  ctx.font = 'bold ' + fontSize + 'px sans';
  ctx.textAlign = 'center';
}

function fillCircle(context, x, y, radius) {
  context.beginPath();
  context.arc(x, y, radius, 0, 2 * Math.PI);
  context.fill();
}

function resizeCanvas() {
  // This might be useful as initialization if live resizing is needed:
  //window.addEventListener('resize', resizeCanvas);

  canvasWidth = window.innerWidth;
  canvasHeight = window.innerHeight;
  canvas.width = canvasWidth;
  canvas.height = canvasHeight;
}

function getCanvasWidth() {
  return canvasWidth;
}

function getCanvasHeight() {
  return canvasHeight;
}

function clearCanvas(context) {
  context.clearRect(0, 0, context.canvas.width, context.canvas.height);
  context.beginPath();
}

"""
