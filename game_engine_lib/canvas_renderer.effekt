module renderer

import game_engine_lib/math
import game_engine_lib/core
import game_engine_lib/engine
import game_engine_lib/ecs

extern type CanvasElement
extern type CanvasRenderingContext2D

type Shape {
  Circle(color: Color);
  Rectangle(color: Color);
  Text(color: Color, text: String);
}

record WindowProperties(size: Vector2Int)
record Camera(transform: Transform)

def canvasRenderer() { prog: => Unit }: Unit / {
  Resource[Camera], Component[Transform], Component[Shape], Components[Unit], nextEntityId, System, ArchManager, EntityManager, World
} = {
  val canvas = getCanvas()
  val context = canvas.getContext;
  // TODO: Read/Apply WindowProperties
  with zipComponents2[Transform, Shape]();
  with addSystem[(Transform, Shape), Unit, Prefab]() { { query } =>
    //println("Resource vec x: " ++ (do getResource[Vector2]()).x.show());
    // TODO: Set camera transform
    query.foreachRO() { (_, values) =>
      values match {
        case (transform, shape) => {
          drawShape(context, transform, shape);
        }
      }
      ()
    }
  };
  prog();
}

// TODO
def drawShape(context: CanvasRenderingContext2D, transform: Transform, shape: Shape): Unit = {
  shape match {
    case Circle(color) =>
      do fillStyle(color);
      do fillCircle(pos, radius);
    case Rectangle(color) =>
      do fillStyle(color);
      do fillRect(pos, size);
    case Text(color, text) =>
      do initFont(fontSize);
      do fillStyle(color);
      do fillText(pos, text);
  }
}

extern io def clearCanvas(context: CanvasRenderingContext2D): Unit =
  js "clearCanvas(${context})"

extern io def resizeCanvas(): Unit =
  js "resizeCanvas()"

extern io def registerEvents(): Unit =
  js "registerEvents()"

extern pure def getCanvasWidth(): Int =
  js "getCanvasWidth()"

extern pure def getCanvasHeight(): Int =
  js "getCanvasHeight()"

extern pure def getCanvas(): CanvasElement =
  js "getCanvas()"

extern pure def getContext(canvas: CanvasElement): CanvasRenderingContext2D =
  js "(${canvas}).getContext('2d')"

extern io def jsFillStyle(context: CanvasRenderingContext2D, color: String): Unit =
  js "(${context}).fillStyle = ${color}"

extern io def jsFillRect(context: CanvasRenderingContext2D, x: Int, y: Int, width: Int, height: Int): Unit =
  js "(${context}).fillRect(${x}, ${y}, ${width}, ${height})"

extern io def jsFillCircle(context: CanvasRenderingContext2D, x: Int, y: Int, radius: Int): Unit =
  js "fillCircle(${context}, ${x}, ${y}, ${radius})"

extern io def jsInitFont(context: CanvasRenderingContext2D, fontSize: Int): Unit =
  js "initFont(${context}, ${fontSize})"

extern io def jsFillText(context: CanvasRenderingContext2D, x: Int, y: Int, text: String): Unit =
  js "(${context}).fillText(${text}, ${x}, ${y})"

extern js """

const canvas = document.getElementById('myCanvas');
let canvasWidth = 0;
let canvasHeight = 0;

function getCanvas() {
  return canvas;
}

function initFont(ctx, fontSize) {
  ctx.font = 'bold ' + fontSize + 'px sans';
  ctx.textAlign = 'center';
}

function fillCircle(context, x, y, radius) {
  context.beginPath();
  context.arc(x, y, radius, 0, 2 * Math.PI);
  context.fill();
}

function resizeCanvas() {
  // This might be useful as initialization if live resizing is needed:
  //window.addEventListener('resize', resizeCanvas);

  canvasWidth = window.innerWidth;
  canvasHeight = window.innerHeight;
  canvas.width = canvasWidth;
  canvas.height = canvasHeight;
}

function getCanvasWidth() {
  return canvasWidth;
}

function getCanvasHeight() {
  return canvasHeight;
}

function clearCanvas(context) {
  context.clearRect(0, 0, context.canvas.width, context.canvas.height);
  context.beginPath();
}

"""
