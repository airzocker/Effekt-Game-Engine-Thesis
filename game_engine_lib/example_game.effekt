module example_game

import game_engine_lib/math
import game_engine_lib/core
import game_engine_lib/ecs
import game_engine_lib/engine
import game_engine_lib/canvas_renderer
import game_engine_lib/input

record Player()

def exampleGame() = {
  with panicOnECSException();
  with engineWorld();

  with component[Player]();

  with canvasRenderer();

  with beginQuery();
  with def rotations = do addC[Rotation]();
  do withC[Shape]();
  do withoutC[Player]();
  with def query = do buildQuery();
  with system() {
    val deltaTime = (do getResource[Time]()).deltaTime;
    val movement = deltaTime * PI * 2.0 * 0.2;
    val rot = if (jsGetKey("ArrowRight")) {
      movement
    } else if (jsGetKey("ArrowLeft")) {
      0.0 - movement
    } else {
      0.0
    };
    query.foreach() { (_) =>
      rotations.set(Rotation(limitRotation(rotations.get().value + rot)))
    }
  };

  with beginQuery();
  with def positions = do addC[Position]();
  do withC[Player]();
  with def query = do buildQuery();
  with system() {
    val deltaTime = (do getResource[Time]()).deltaTime;
    val movement = deltaTime * 4.0;
    val x = if (jsGetKey("ArrowRight")) {
      movement
    } else if (jsGetKey("ArrowLeft")) {
      0.0 - movement
    } else {
      0.0
    };
    val y = if (jsGetKey("ArrowUp")) {
      movement
    } else if (jsGetKey("ArrowDown")) {
      0.0 - movement
    } else {
      0.0
    };
    val change = Vector2(x, y);
    query.foreach() { (_) =>
      positions.set(Position(positions.get().value + change))
    }
  };

  val rect = do createEntity();
  do setComponent[Position](rect, default());
  do setComponent[Rotation](rect, default());
  do setComponent(rect, Scale(Vector2(3.0, 1.5)));
  do setComponent(rect, Rect(Color(255, 0, 255)));

  val circle = do createEntity();
  do setComponent(circle, Position(Vector2(4.0, 2.0)));
  do setComponent[Rotation](circle, default());
  do setComponent(circle, Scale(Vector2(3.0, 1.5)));
  do setComponent(circle, Circle(Color(255, 0, 255)));

  val testText = do createEntity();
  do setComponent(testText, Position(Vector2(-4.0, 2.0)));
  do setComponent[Rotation](testText, default());
  do setComponent[Scale](testText, default());
  do setComponent(testText, Text(Color(255, 0, 255), "Test-text"));

  val stretchedText = do createEntity();
  do setComponent(stretchedText, Position(Vector2(-4.0, -2.0)));
  do setComponent[Rotation](stretchedText, default());
  do setComponent(stretchedText, Scale(Vector2(1.333, 0.75)));
  do setComponent(stretchedText, Text(Color(255, 0, 255), "stretched"));

  val squishedText = do createEntity();
  do setComponent(squishedText, Position(Vector2(4.0, -2.0)));
  do setComponent[Rotation](squishedText, default());
  do setComponent(squishedText, Scale(Vector2(0.75, 1.333)));
  do setComponent(squishedText, Text(Color(255, 0, 255), "squished"));

  do setResource[Camera](Camera(
    zero(),
    0.0,
    12.0
  ));

  do runWorld();
  
  ()
}
