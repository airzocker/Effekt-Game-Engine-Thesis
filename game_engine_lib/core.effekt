module core

import mutable/map
import resizable_array
import stream

// Map delete extension
extern js """
function map$delete(m, key) {
  m.delete(key);
  return $effekt.unit
}
"""

extern io def delete[K, V](m: Map[K, V], key: K): Unit =
  js "map$delete(${m}, ${key})"

def addSome[T](l: List[T], value: Option[T]): List[T] = {
  value match {
    case Some(v) => l.append([v])
    case None() => l
  }
}

// Returns the index that got swapped away (to the removed index), if any
def removeSwap[T](arr: ResizableArray[T], index: Int): Option[Int] = {
  val newSize = arr.size() - 1;
  var swapped = None();
  if (index < newSize) {
    arr.unsafeSet(index, arr.unsafeGet(newSize));
    swapped = Some(newSize);
  }
  try {
    arr.popRight();
  } with Exception[OutOfBounds] {
    def raise(exception: OutOfBounds, msg: String) = {
      panic("OutOfBounds: " ++ msg);
    }
  }
  swapped
}

def each[T](arr: ResizableArray[T]): Unit / emit[T] = {
  val n = arr.size();
  def go(i: Int): Unit = {
    if (i < n) {
      do emit(arr.unsafeGet(i));
      go(i + 1);
    }
  };
  go(0);
}

def dedupMergeInt(l1: List[Int], l2: List[Int]): List[Int] = {
  if (l1.size() == 0) {
    return(l2);
  } else if (l2.size() == 0) {
    return(l1);
  } else {
    var l1 = l1;
    var l2 = l2;
    val result = resizableArray(4);
    loop() { { l } =>
      l1 match {
        case Nil() => l.break();
          case Cons(val1, rest1) =>
          l2 match {
            case Nil() => l.break();
              case Cons(val2, rest2) =>
              if (val1 == val2) {
                result.add(val1)
                l1 = rest1
                l2 = rest2
              } else if (val1 < val2) {
                result.add(val1);
                l1 = rest1;
              } else {
                result.add(val2);
                l2 = rest2;
              }
          }
      }
    }
    l1.foreach() { v =>
      result.add(v);
      ()
    }
    l2.foreach() { v =>
      result.add(v);
      ()
    }
    result.toList();
  }
}

record Color(r: Int, g: Int, b: Int)

def setR(c: Color, i: Int): Color = {
  Color(i, c.g, c.b)
}

def setG(c: Color, i: Int): Color = {
  Color(c.r, i, c.b)
}

def setB(c: Color, i: Int): Color = {
  Color(c.r, c.g, i)
}

def show(c: Color): String = {
  "rgb(" ++ show(c.r) ++ " " ++ show(c.g) ++ " " ++ show(c.b) ++ ")"
}