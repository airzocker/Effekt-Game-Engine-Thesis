module core

import mutable/map
import array
import resizable_array
import stream

record OptionArray[T](arr: ResizableArray[Option[T]], freeIndices: ResizableArray[Int])

def optionArray[T](initialCapacity: Int): OptionArray[T] = {
  OptionArray(resizableArray(initialCapacity), resizableArray(4))
}

def get[T](optionArray: OptionArray[T], index: Int): Option[T] = {
  if (index >= optionArray.arr.size() || index < 0) {
    None()
  } else {
    optionArray.arr.unsafeGet(index);
  }
}

def unsafeGet[T](optionArray: OptionArray[T], index: Int): T = {
  optionArray.arr.unsafeGet(index).value()
}

def unsafeSet[T](optionArray: OptionArray[T], index: Int, value: T): Unit = {
  optionArray.arr.unsafeSet(index, value);
}

def add[T](optionArray: OptionArray[T], value: T): Int = {
  if (optionArray.freeIndices.size() > 0) {
    with on[OutOfBounds].default {
      panic("impossible error");
    }
    val index = optionArray.freeIndices.popRight();
    optionArray.arr.unsafeSet(index, Some(value));
    index
  } else {
    optionArray.arr.add(Some(value))
  }
}

def remove[T](optionArray: OptionArray[T], index: Int): Unit = {
  optionArray.arr.unsafeSet(index, None());
  optionArray.freeIndices.add(index);
  ()
}

def containsAll[K, V](map: Map[K, V], values: Array[K]): Bool = {
  var contains = true;
  values.foreach() { (value) { l } =>
    if (map.get(values).isDefined()) {
      l.continue();
    }
    contains = false;
    l.break();
  };
  contains
}

def containsNone[K, V](map: Map[K, V], values: Array[K]): Bool = {
  var contains = true;
  values.foreach() { (value) { l } =>
    if (map.get(values).isDefined()) {
      contains = false;
      l.break();
    }
  };
  contains
}

def containsOnlyAll[K, V](map: Map[K, V], values: Array[K]): Bool = {
  if (values.size() != map.size()) {
    false
  } else {
    map.containsAll(values)
  }
}

// Map delete extension
extern js """
function map$delete(m, key) {
  m.delete(key);
  return $effekt.unit
}
"""

extern io def delete[K, V](m: Map[K, V], key: K): Unit =
  js "map$delete(${m}, ${key})"

extern pure def size[K, V](m: Map[K, V]): Int =
  js "${m}.size"

// Returns the index that got swapped away (to the removed index), if any
def removeSwap[T](arr: ResizableArray[T], index: Int): Option[Int] = {
  val newSize = arr.size() - 1;
  var swapped = None();
  if (index < newSize) {
    arr.unsafeSet(index, arr.unsafeGet(newSize));
    swapped = Some(newSize);
  }
  try {
    arr.popRight();
  } with Exception[OutOfBounds] {
    def raise(exception: OutOfBounds, msg: String) = {
      panic("OutOfBounds: " ++ msg);
    }
  }
  swapped
}

def each[T](arr: ResizableArray[T]): Unit / emit[T] = {
  val n = arr.size();
  def go(i: Int): Unit = {
    if (i < n) {
      do emit(arr.unsafeGet(i));
      go(i + 1);
    }
  };
  go(0);
}

record Color(r: Int, g: Int, b: Int)

def setR(c: Color, i: Int): Color = {
  Color(i, c.g, c.b)
}

def setG(c: Color, i: Int): Color = {
  Color(c.r, i, c.b)
}

def setB(c: Color, i: Int): Color = {
  Color(c.r, c.g, i)
}

def show(c: Color): String = {
  "rgb(" ++ show(c.r) ++ " " ++ show(c.g) ++ " " ++ show(c.b) ++ ")"
}