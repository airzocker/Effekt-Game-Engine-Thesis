module core

import mutable/map
import resizable_array
import stream

// Map delete extension
extern js """
function map$delete(m, key) {
  m.delete(key);
  return $effekt.unit
}
"""

extern io def delete[K, V](m: Map[K, V], key: K): Unit =
  js "map$delete(${m}, ${key})"

// Returns the index that got swapped away (to the removed index), if any
def removeSwap[T](arr: ResizableArray[T], index: Int): Option[Int] = {
  val newSize = arr.size() - 1;
  var swapped = None();
  if (index < newSize) {
    arr.unsafeSet(index, arr.unsafeGet(newSize));
    swapped = Some(newSize);
  }
  try {
    arr.popRight();
  } with Exception[OutOfBounds] {
    def raise(exception: OutOfBounds, msg: String) = {
      panic("OutOfBounds: " ++ msg);
    }
  }
  swapped
}

def each[T](arr: ResizableArray[T]): Unit / emit[T] = {
  val n = arr.size();
  def go(i: Int): Unit = {
    if (i < n) {
      do emit(arr.unsafeGet(i));
      go(i + 1);
    }
  };
  go(0);
}

def bubbleSortInt(arr: ResizableArray[Int]): Unit = {
  if (arr.size() < 2) {
    return();
  }
  var swapped = false;
  each(0, arr.size() - 1) { index =>
    if (arr.unsafeGet(index) > arr.unsafeGet(index + 1)) {
      arr.unsafeSwap(index, index + 1);
      ()
    }
  }
  if (swapped) {
    bubbleSortInt(arr);
  }
}

record Color(r: Int, g: Int, b: Int)

def setR(c: Color, i: Int): Color = {
  Color(i, c.g, c.b)
}

def setG(c: Color, i: Int): Color = {
  Color(c.r, i, c.b)
}

def setB(c: Color, i: Int): Color = {
  Color(c.r, c.g, i)
}