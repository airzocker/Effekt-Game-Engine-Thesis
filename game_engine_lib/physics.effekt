module physics

import game_engine_lib/math
import game_engine_lib/engine
import game_engine_lib/ecs

record Velocity(value: Vector2)
record AngularVelocity(value: Double)
record Gravity(value: Vector2)
type Collider {
  Circle();
  Rect();
}
record Rigidbody(lastPos: Vector2)
record Trigger()
record CollisionData(other: Option[Entity])

def physicsEngine() { prog: => Unit / {
  Resource[Gravity],
  Component[Velocity], Component[AngularVelocity], Component[Collider], Component[Rigidbody], Component[Trigger], Component[CollisionData],
  Component[Option[Velocity]], Component[Option[AngularVelocity]], Component[Option[Collider]], Component[Option[Rigidbody]], Component[Option[Trigger]], Component[Option[CollisionData]],
  Components[Velocity], Components[AngularVelocity], Components[Collider], Components[Rigidbody], Components[Trigger], Components[CollisionData],
  Components[Option[Velocity]], Components[Option[AngularVelocity]], Components[Option[Collider]], Components[Option[Rigidbody]], Components[Option[Trigger]], Components[Option[CollisionData]],
  Components[(Position, Rigidbody)],
  Components[(Position, Velocity)],
  Components[(Rotation, AngularVelocity)],
  System
} }: Unit / {
  Resource[Time], Component[Position], Component[Rotation], Component[Scale],
  Components[Unit],
  ComponentManager, System, ArchManager, EntityManager
} = {
  with component[Velocity]();
  with component[AngularVelocity]();
  with component[Collider]();
  with component[Rigidbody]();
  with component[Trigger]();
  with component[CollisionData]();
  with createResource[Gravity](Gravity(Vector2(0.0, -9.81)));
  with zipComponents2[Position, Rigidbody]();
  with zipComponents2[Position, Velocity]();
  with zipComponents2[Rotation, AngularVelocity]();
  // Save last position on rigidbodies
  with addSystem[(Position, Rigidbody), Unit, Unit]() { { query } =>
    query.foreachRW() { (entity, values) =>
      values match {
        case (position, rigidbody) => {
          (position, Rigidbody(position.value))
        }
      }
    }
    ()
  };
  // Add gravity to rigidbodies velocities
  with addSystem[Velocity, Rigidbody, Unit]() { { query } =>
    val deltaTime = (do getResource[Time]()).deltaTime;
    val acceleration = (do getResource[Gravity]()).value * deltaTime;
    query.foreachRW() { (entity, velocity) =>
      Velocity(velocity.value + acceleration)
    }
    ()
  };
  // Apply velocities to positions
  with addSystem[(Position, Velocity), Unit, Unit]() { { query } =>
    val deltaTime = (do getResource[Time]()).deltaTime;
    val gravity = do getResource[Gravity]();
    query.foreachRW() { (entity, values) =>
      values match {
        case (position, velocity) => {
          (Position(position.value + velocity.value * deltaTime), velocity)
        }
      }
    }
    ()
  };
  // Apply angular velocities to rotations
  with addSystem[(Rotation, AngularVelocity), Unit, Unit]() { { query } =>
    val deltaTime = (do getResource[Time]()).deltaTime;
    query.foreachRW() { (entity, values) =>
      values match {
        case (rotation, angularVelocity) => {
          (Rotation(rotation.value + angularVelocity.value * deltaTime), angularVelocity)
        }
      }
    }
    ()
  };
  // TODO: physics calcs
  prog();
}