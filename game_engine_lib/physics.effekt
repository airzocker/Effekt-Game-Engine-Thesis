module physics

import game_engine_lib/math
import game_engine_lib/engine
import game_engine_lib/ecs

record Velocity(value: Vector2)
record Gravity(value: Vector2)
// Collider only works for uniform scaled circles or AABBs for now
type Collider {
  Circle();
  AABB();
}
// Rigidbody only works for uniform scaled circles for now
record Rigidbody(lastPos: Vector2)
// Trigger only works for uniform scaled circles or AABBs for now
record Trigger()

/*
def physicsEngine() { prog: => Unit / {
  Resource[Gravity], Component[Velocity], Component[Collider], Component[Rigidbody], Component[Trigger],
  Components[Velocity], Components[Collider], Components[Rigidbody], Components[Trigger],
  Components[(Transform, Rigidbody)], Components[(Transform, Velocity)], //Components[(Transform, Collider)],
  System
} }: Unit / {
  Resource[Time], Component[Transform],
  Components[Velocity], Components[Unit],
  nextEntityId, nextComponentId, System, ArchManager, EntityManager
} = {
  with component[Velocity]();
  with component[Collider]();
  with component[Rigidbody]();
  with component[Trigger]();
  with createResource[Gravity](Gravity(Vector2(0.0, -9.81)));
  with zipComponents2[Transform, Rigidbody]();
  with zipComponents2[Transform, Velocity]();
  //with zipComponents2[Transform, Collider]();
  // Save last position on rigidbodies
  with addSystem[(Transform, Rigidbody), Unit, Unit]() { { query } =>
    query.foreachRW() { (entity, values) =>
      values match {
        case (transform, rigidbody) => {
          (transform, Rigidbody(transform.position))
        }
      }
    }
    ()
  };
  // Add gravity to rigidbodies velocities
  with addSystem[Velocity, Rigidbody, Unit]() { { query } =>
    val deltaTime = (do getResource[Time]()).deltaTime;
    val acceleration = (do getResource[Gravity]()).value * deltaTime;
    query.foreachRW() { (entity, velocity) =>
      Velocity(velocity.value + acceleration)
    }
    ()
  };
  // Apply velocities to transforms
  with addSystem[(Transform, Velocity), Unit, Unit]() { { query } =>
    val deltaTime = (do getResource[Time]()).deltaTime;
    val gravity = do getResource[Gravity]();
    query.foreachRW() { (entity, values) =>
      values match {
        case (transform, velocity) => {
          (Transform(transform.position + velocity.value * deltaTime, transform.rotation, transform.scale), velocity)
        }
      }
    }
    ()
  };
  // TODO: physics calcs
  prog();
}
*/