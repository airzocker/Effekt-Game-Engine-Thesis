module engine

import io
import io/time

import game_engine_lib/math
import game_engine_lib/ecs
import game_engine_lib/input

record Position(value: Vector2)
record Rotation(value: Double)
record Scale(value: Vector2)
record Time(
  deltaTime: Double,
  gameTime: Double,
  unscaledDeltaTime: Double,
  unscaledGameTime: Double,
  frame: Int
)
record TimeScale(value: Double)

def default(): Position = Position(zero())
def default(): Rotation = Rotation(0.0)
def default(): Scale = Scale(one())

def limitRotation(rotation: Double): Double = {
  val twoPi = 2.0 * PI;
  val rotations = floor(rotation / twoPi);
  val limited = rotation - rotations.toDouble() * twoPi;
  if (limited > PI) {
    limited - twoPi
  } else {
    limited
  }
}

def engineWorld() { prog: => Unit / {
  Resource[Time], Resource[TimeScale],
  Component[Position], Component[Rotation], Component[Scale],
  Component[Option[Position]], Component[Option[Rotation]], Component[Option[Scale]],
  Components[Position], Components[Rotation], Components[Scale],
  Components[Option[Position]], Components[Option[Rotation]], Components[Option[Scale]],
  Components[Unit], 
  ComponentManager, ArchManager, EntityManager, System, World
} }: Unit = {
  jsInitInput();
  with world();
  with component[Position]();
  with component[Rotation]();
  with component[Scale]();
  with defaultEngineSystem();
  prog();
}

def defaultEngineSystem() { prog: => Unit / {
  Resource[Time], Resource[TimeScale],
  System
} }: Unit / {
  Resource[RunWorld],
  Components[Unit],
  System, ArchManager, EntityManager, World
} = {
  val timeScale = TimeScale(1.0);
  val time = updateTime(Time(0.0, 0.0, 0.0, 0.0, -1), timeScale);
  with createResource[TimeScale](timeScale);
  with createResource[Time](time);
  with addSystem[Unit, Unit, Unit]() { { _ } =>
    do setResource[Time](updateTime(do getResource[Time](), do getResource[TimeScale]()));
    jsClearFrameInput();
    if (jsGetKey("Escape")) {
      do setResource[RunWorld](RunWorld(false));
    }
  };
  prog();
}

def updateTime(time: Time, timeScale: TimeScale): Time = {
  val now = jsGetTime();
  val deltaTime = now - time.unscaledGameTime;
  val scaledDeltaTime = deltaTime * timeScale.value;
  Time(
    scaledDeltaTime,
    time.gameTime + scaledDeltaTime,
    deltaTime,
    time.unscaledGameTime + deltaTime,
    time.frame + 1
  )
}

extern pure def jsGetTime(): Double =
  js "window.performance.now() / 1000.0"
