module engine

import io
import io/time

import game_engine_lib/math
import game_engine_lib/ecs

type Prefab = Unit

record Transform(position: Vector2, rotation: Double, scale: Vector2)
record CameraTransform(position: Vector2, rotation: Double, height: Double)
record Time(deltaTime: Double, gameTime: Double, frame: Int)

interface World {
  def stepWorld(): Unit / System
  def runWorld(): Unit / System
}

def limitRotation(rotation: Double): Double = {
  val twoPi = 2.0 * PI;
  val rotations = floor(rotation / twoPi);
  val limited = rotation - rotations.toDouble() * twoPi;
  if (limited > PI) {
    limited - twoPi
  } else {
    limited
  }
}

def uniformScale(scale: Double): Vector2 = {
  Vector2(scale, scale)
}

def world() { prog: => Unit / {
  Resource[Time], nextComponentId, nextEntityId, ArchManager, EntityManager, Components[Unit], System, World
} } = {
  with componentIdManager();
  with entityIdManager();
  with archManager();
  with entityManager();
  with defaultComponents();
  with defaultSystem();
  def stepWorld() = {
    do updateQueries();
    systemEntityManager() {
      do step();
    };
  }
  try {
    with timeSystem();
    initInput();
    prog();
  } with World {
    def stepWorld() = {
      resume {
        stepWorld();
      }
    }
    def runWorld() = {
      resume {
        loop { { l } =>
          if (jsIsInputEscape()) {
            l.break();
          }
          await(promise(box { wait(0) } ));
          stepWorld();
        }
      }
    }
  }
}

def timeSystem() { prog: => Unit / {
  Resource[Time], System
} }: Unit / {
  Components[Unit], nextEntityId, System, ArchManager, EntityManager, World
} = {
  with createResource[Time](updateTime(Time(0.0, 0.0, -1)));
  with addSystem[Unit, Unit, Prefab]() { { _ } =>
    do setResource[Time](updateTime(do getResource[Time]()));
  };
  prog();
}

def updateTime(time: Time): Time = {
  val now = jsGetTime();
  Time(now - time.gameTime, now, time.frame + 1)
}

def initInput(): Unit = {
  jsRegisterEvents();
}

extern io def jsRegisterEvents(): Unit =
  js "registerEvents()"

extern pure def jsIsInput1Up(): Bool =
  js "isInput1Up()"

extern pure def jsIsInput1Down(): Bool =
  js "isInput1Down()"

extern pure def jsIsInput2Up(): Bool =
  js "isInput2Up()"

extern pure def jsIsInput2Down(): Bool =
  js "isInput2Down()"

extern pure def jsIsInputEscape(): Bool =
  js "isInputEscape()"

extern pure def jsGetTime(): Double =
  js "window.performance.now() / 1000.0"

extern js """

let up1 = false;
let down1 = false;
let up2 = false;
let down2 = false;
let escape = false;

function registerEvents() {
  window.addEventListener('keydown', onKeyDown, true);
  window.addEventListener('keyup', onKeyUp, true);
}

function onKeyDown(event) {
  if (event.code == 'KeyW') {
    up1 = true;
  }
  if (event.code == 'KeyS') {
    down1 = true;
  }
  if (event.code == 'ArrowUp') {
    up2 = true;
  }
  if (event.code == 'ArrowDown') {
    down2 = true;
  }
  if (event.code == 'Escape') {
    escape = true;
  }
}

function onKeyUp(event) {
  if (event.code == 'KeyW') {
    up1 = false;
  }
  if (event.code == 'KeyS') {
    down1 = false;
  }
  if (event.code == 'ArrowUp') {
    up2 = false;
  }
  if (event.code == 'ArrowDown') {
    down2 = false;
  }
}

function isInput1Up() {
  return up1;
}

function isInput1Down() {
  return down1;
}

function isInput2Up() {
  return up2;
}

function isInput2Down() {
  return down2;
}

function isInputEscape() {
  return escape;
}

"""