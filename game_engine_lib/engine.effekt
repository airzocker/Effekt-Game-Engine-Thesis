module engine

import io
import io/time

import game_engine_lib/math
import game_engine_lib/ecs
import game_engine_lib/input

record Transform(position: Vector2, rotation: Double, scale: Vector2)
record Time(deltaTime: Double, gameTime: Double, frame: Int)

interface World {
  def stepWorld(): Unit / System
  def runWorld(): Unit / System
}

def limitRotation(rotation: Double): Double = {
  val twoPi = 2.0 * PI;
  val rotations = floor(rotation / twoPi);
  val limited = rotation - rotations.toDouble() * twoPi;
  if (limited > PI) {
    limited - twoPi
  } else {
    limited
  }
}

def uniformScale(scale: Double): Vector2 = {
  Vector2(scale, scale)
}

def world() { prog: => Unit / {
  Resource[Time], Component[Transform],
  Components[Unit], Components[Transform],
  nextComponentId, nextEntityId, ArchManager, EntityManager, System, World
} }: Unit = {
  with componentIdManager();
  with entityIdManager();
  with archManager();
  with entityManager();
  def stepWorld() = {
    do updateQueries();
    jsClearFrameInput();
    systemEntityManager() {
      do step();
    };
  }
  try {
    with defaultComponents();
    with component[Transform]();
    with defaultSystem();
    with timeSystem();
    jsInitInput();
    prog();
  } with World {
    def stepWorld() = {
      resume {
        stepWorld();
      }
    }
    def runWorld() = {
      resume {
        loop { { l } =>
          if (jsGetKey("Escape")) {
            l.break();
          }
          await(promise(box { wait(0) } ));
          stepWorld();
        }
      }
    }
  }
}

def timeSystem() { prog: => Unit / {
  Resource[Time],
  System
} }: Unit / {
  Components[Unit],
  nextEntityId, System, ArchManager, EntityManager, World
} = {
  with createResource[Time](updateTime(Time(0.0, 0.0, -1)));
  with addSystem[Unit, Unit, Unit]() { { _ } =>
    do setResource[Time](updateTime(do getResource[Time]()));
  };
  prog();
}

def updateTime(time: Time): Time = {
  val now = jsGetTime();
  Time(now - time.gameTime, now, time.frame + 1)
}

extern pure def jsGetTime(): Double =
  js "window.performance.now() / 1000.0"