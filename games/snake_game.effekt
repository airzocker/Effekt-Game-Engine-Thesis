module snake_game

import game_engine_lib/math
import game_engine_lib/core
import game_engine_lib/ecs
import game_engine_lib/engine
import game_engine_lib/canvas_renderer
import game_engine_lib/input

// Components
record SnakeTag()
record MoveDir(next: Vector2Int, last: Vector2Int)
record LastPosition(value: Vector2)
record NextTail(value: Entity)
record Score(value: Int)

// Resouces
record GameOver(value: Bool)
record MoveTimer(moveTimer: Double, doMove: Bool)
record HeadEntity(value: Entity)
record LastTailEntity(value: Entity)
record AppleEntity(value: Entity)
record ScoreEntity(value: Entity)

def snakeGame() = {
  with panicOnEcsException();

  // Color constants
  val wallColor = Color(100, 98, 105);
  val backgroundColor = Color(200, 180, 50);
  val headColor = Color(40, 40, 180);
  val tailColor = Color(60, 200, 50);
  val appleColor = Color(240, 40, 20);
  val textColor = Color(240, 240, 240);

  // Game constants
  val gridSize = 35;
  val gridOffset = 0.5 - gridSize.toDouble() * 0.5;
  val wallSize = 1.5;
  val moveTime = 0.1;
  val startPos = unif((gridSize / 2).toDouble());
  val startDir = Vector2Int(0, 1);
  val gameOverTextScale = 1.0 / 12.0;

  // ECS, engine & renderer init
  with engineWorld();
  with canvasRenderer();

  // Our components
  with component[SnakeTag]();
  with component[MoveDir]();
  with component[LastPosition]();
  with component[NextTail]();
  with component[Score]();

  // Our resources
  with createResource[GameOver](GameOver(false));
  with createResource[MoveTimer](MoveTimer(0.0, false));
  with createResource[HeadEntity](HeadEntity(invalid()));
  with createResource[LastTailEntity](LastTailEntity(invalid()));
  with createResource[AppleEntity](AppleEntity(invalid()));
  with createResource[ScoreEntity](ScoreEntity(invalid()));

  def initGame() = {
    do setResource[MoveTimer](MoveTimer(moveTime, false));
    
    val walls = do createEntity();
    do setComponent(walls, Position(unif(0.0 - gridOffset)));
    do setComponent(walls, Scale(unif(gridSize.toDouble() + 2.0 * wallSize)));
    do setComponent(walls, Rect(wallColor));

    val background = do createEntity();
    do setComponent(background, Position(unif(0.0 - gridOffset)));
    do setComponent(background, Scale(unif(gridSize.toDouble())));
    do setComponent(background, Rect(backgroundColor));

    val head = do createEntity();
    do setComponent(head, Position(startPos));
    do setComponent(head, LastPosition(startPos));
    do setComponent(head, Rect(headColor));
    do setComponent(head, MoveDir(startDir, startDir));
    do setComponent(head, SnakeTag());

    do setResource[HeadEntity](HeadEntity(head));
    do setResource[LastTailEntity](LastTailEntity(head));
    
    var applePos: Vector2 = zero();
    each(0, gridSize * gridSize) { (_) { l } =>
      applePos = Vector2(jsRandomInt(0, gridSize).toDouble(), jsRandomInt(0, gridSize).toDouble());
      if (startPos == applePos) {
        l.continue();
      }
      l.break();
    }

    val apple = do createEntity();
    do setComponent(apple, Position(applePos));
    do setComponent(apple, Rect(appleColor));

    do setResource[AppleEntity](AppleEntity(apple));
    
    val score = do createEntity();
    do setComponent(score, Position(Vector2(wallSize * 1.5 - 0.5, (gridSize.toDouble() - 0.5) + 0.5 * wallSize)));
    do setComponent(score, Scale(unif((7.0 / 8.0) * wallSize)));
    do setComponent(score, Text(textColor, ""));
    do setComponent(score, Score(0));

    do setResource[ScoreEntity](ScoreEntity(score));
  }

  def gameOver() = {
    do setResource[GameOver](GameOver(true));

    val gameOver = do createEntity();
    do setComponent(gameOver, Position(Vector2(0.0 - gridOffset, (0.0 - gridOffset) + gridSize.toDouble() * gameOverTextScale)));
    do setComponent(gameOver, Scale(unif(gridSize.toDouble() * gameOverTextScale)));
    do setComponent(gameOver, Text(textColor, "GAME OVER"));

    val score = (do getResource[ScoreEntity]()).value;
    do setComponent[Position](score, Position(Vector2(0.0 - gridOffset, (0.0 - gridOffset) - gridSize.toDouble() * gameOverTextScale)));
    do setComponent[Scale](score, Scale(unif(gridSize.toDouble() * gameOverTextScale)));
    println("after gameOver");
  }

  // System for state updates without components
  with system() {
    println("state system");
    // Update game dimensions from window size
    val windowSize = (do getResource[WindowProperties]()).size;
    var camHeight = gridSize.toDouble() + 2.0 * wallSize;
    if (windowSize.x < windowSize.y) {
      camHeight = camHeight * (windowSize.y.toDouble() / windowSize.x.toDouble());      
    }
    do setResource[Camera](Camera(
      Vector2(0.0 - gridOffset, 0.0 - gridOffset),
      0.0,
      camHeight
    ));

    // Update move timer
    if (not((do getResource[GameOver]()).value)) {
      val deltaTime = (do getResource[Time]()).deltaTime;
      var moveTimer = (do getResource[MoveTimer]()).moveTimer - deltaTime;
      val doMove = moveTimer < 0.0;
      if (doMove) {
        moveTimer = moveTimer + moveTime;
        if (moveTimer < 0.0) {
          moveTimer = 0.0;
        }
      }
      do setResource[MoveTimer](MoveTimer(moveTimer, doMove));
    }
  };

  // Update head
  with def query = query();
  with def positions = query.addC[Position]();
  with def moveDirs = query.addC[MoveDir]();
  query.withC[SnakeTag]();
  with system() {
    if (not((do getResource[GameOver]()).value)) {
      val doMove = (do getResource[MoveTimer]()).doMove;
      query.foreach() { (_) =>
        val position = positions.get();
        val moveDir = moveDirs.get();
        var newMoveDir = moveDir.next;
        if (jsGetKeyDown("ArrowUp") && moveDir.last.y == 0) {
          newMoveDir = Vector2Int(0, 1)
        } else if (jsGetKeyDown("ArrowDown") && moveDir.last.y == 0) {
          newMoveDir = Vector2Int(0, -1)
        } else if (jsGetKeyDown("ArrowRight") && moveDir.last.x == 0) {
          newMoveDir = Vector2Int(1, 0)
        } else if (jsGetKeyDown("ArrowLeft") && moveDir.last.x == 0) {
          newMoveDir = Vector2Int(-1, 0)
        }
        val newLastMoveDir = if (doMove) {
          newMoveDir
        } else {
          moveDir.last
        };
        val newPosition = if (doMove) {
          Position(Vector2(
            (position.value.x.round() + newMoveDir.x).toDouble(),
            (position.value.y.round() + newMoveDir.y).toDouble()
          ))
        } else {
          position
        };
        positions.set(newPosition);
        moveDirs.set(MoveDir(newMoveDir, newLastMoveDir));
      };
    }
    ()
  };

  // Update tail
  with def query = query();
  with def positions = query.addC[Position]();
  with def nextTails = query.addC[NextTail]();
  query.withC[SnakeTag]();
  with system() {
    if (not((do getResource[GameOver]()).value)) {
      val doMove = (do getResource[MoveTimer]()).doMove;
      if (doMove) {
        query.foreach() { (_) =>
          val nextPos = (do getComponent[LastPosition](nextTails.get().value)).value;
          positions.set(Position(nextPos));
        };
      }
    }
    ()
  };

  // Update apple
  // Query is on all snake parts to check for non-colliding placement
  with def query = query();
  with def positions = query.addC[Position]();
  query.withC[SnakeTag]();
  with system() {
    val doMove = (do getResource[MoveTimer]()).doMove;
    if (doMove) {
      val apple = (do getResource[AppleEntity]()).value;
      val applePos = (do getComponent[Position](apple)).value;
      val headPos = (do getComponent[Position]((do getResource[HeadEntity]()).value)).value;
      // Apple eaten
      if (headPos == applePos) {
        // Increment score
        val scoreEntity = (do getResource[ScoreEntity]()).value;
        val newScore = (do getComponent[Score](scoreEntity)).value + 1;
        do setComponent[Score](scoreEntity, Score(newScore));
        // Find new apple position
        var newApplePosOpt = None();
        each(0, gridSize * gridSize) { (_) { l } =>
          var newApplePos = Vector2(jsRandomInt(0, gridSize).toDouble(), jsRandomInt(0, gridSize).toDouble());
          query.foreach() { (_) =>
            if (positions.get().value == newApplePos) {
              l.continue();
            }
          };
          newApplePosOpt = Some(newApplePos);
          l.break();
        }
        newApplePosOpt match {
          case Some(pos) => {
            do setComponent[Position](apple, Position(pos));
            // Add tail part
            val lastTail = (do getResource[LastTailEntity]()).value;
            val tailPos = (do getComponent[LastPosition](lastTail)).value;
            val tail = do createEntity();
            do setComponent(tail, Position(tailPos));
            do setComponent(tail, LastPosition(tailPos));
            do setComponent(tail, Rect(tailColor));
            do setComponent(tail, NextTail(lastTail));
            do setComponent(tail, SnakeTag());
            do setResource[LastTailEntity](LastTailEntity(tail));
          }
          // TODO: Win state?
          case None() => gameOver();
        }
      }
    }
  }

  // Detect head collisions
  // Query is on tail parts to check for head collision
  with def query = query();
  with def positions = query.addC[Position]();
  query.withC[SnakeTag]();
  query.withC[NextTail]();
  with system() {
    if (not((do getResource[GameOver]()).value)) {
      val doMove = (do getResource[MoveTimer]()).doMove;
      if (doMove) {
        val headPos = (do getComponent[Position]((do getResource[HeadEntity]()).value)).value;
        if (headPos.x < -0.5 || headPos.y < -0.5 || headPos.x > gridSize.toDouble() - 0.5 || headPos.y > gridSize.toDouble() - 0.5) {
          gameOver();
        }
        query.foreach() { (_) =>
          if (headPos == positions.get().value) {
            gameOver();
          }
        };
      }
    }
  };

  // Update score text
  with system() {
    val doMove = (do getResource[MoveTimer]()).doMove;
    if (doMove) {
      val scoreEntity = (do getResource[ScoreEntity]()).value;
      val score = do getComponent[Score](scoreEntity);
      do setComponent(scoreEntity, Text(textColor, "Score: " ++ score.value.show()));
    }
  };

  // Update LastPosition from Position
  with def query = query();
  with def positions = query.addC[Position]();
  with def lastPositions = query.addC[LastPosition]();
  with system() {
    if (not((do getResource[GameOver]()).value)) {
      val doMove = (do getResource[MoveTimer]()).doMove;
      if (doMove) {
        query.foreach() { (_) =>
          lastPositions.set(LastPosition(positions.get().value));
        };
      }
    } else {
      query.foreach() { (_) =>
        positions.set(Position(lastPositions.get().value));
      };
    }
  };

  // Reset game (destroy all entities)
  with def query = query();
  with system() {
    if ((do getResource[GameOver]()).value && jsGetKeyDown("Enter")) {
      do setResource[GameOver](GameOver(false));
      query.foreach() { (entity) =>
        do destroyEntity(entity);
      };
      initGame();
    }
  };

  initGame();

  do runWorld();

  ()
}
