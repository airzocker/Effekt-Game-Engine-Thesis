module engineless_snake

import io/time

interface WindowProperties {
  def getWindowW(): Int
  def getWindowH(): Int
  def getSmallerSide(): Int
  def pixelsPerUnit(): Double
  def gameToWindow(x: Double, y: Double): (Double, Double)
  def updateWindowProperties(): Unit
}

def snakeWindowProperties(gridSize: Int, wallSize: Double) { prog: => Unit / WindowProperties } = {
  var width = 1;
  var height = 1;
  def smallerSide() = {
    min(width, height)
  }
  def pixelsPerGrid() = {
    smallerSide().toDouble() / (gridSize.toDouble() + wallSize * 2.0)
  }
  try {
    prog();
  } with WindowProperties {
    def getWindowW() = {
      resume(width)
    }
    def getWindowH() = {
      resume(height)
    }
    def getSmallerSide() = {
      resume(smallerSide())
    }
    def pixelsPerUnit() = {
      resume(pixelsPerGrid())
    }
    def gameToWindow(x: Double, y: Double) = {
      val ppu = pixelsPerGrid();
      resume((
        (x + wallSize + 0.5) * ppu,
        height.toDouble() - ((y + wallSize + 0.5) * ppu)
      ))
    }
    def updateWindowProperties() = {
      width = jsGetCanvasWidth();
      height = jsGetCanvasHeight();
      resume(())
    }
  }
}

def runSnake() = {
  val context = jsGetContext();

  // Color constants
  val wallColor = "rgb(100 98 105)";
  val backgroundColor = "rgb(200 180 50)";
  val headColor = "rgb(40 40 180)";
  val tailColor = "rgb(60 200 50)";
  val appleColor = "rgb(240 40 20)";
  val textColor = "rgb(240 240 240)";

  // Game constants
  val gridSize = 35;
  val gridOffset = 0.5 - gridSize.toDouble() * 0.5;
  val wallSize = 1.5;
  val moveTime = 0.1;
  val scoreFontSize = (7.0 / 8.0) * wallSize;
  val gameOverTextScale = 1.0 / 12.0;

  // Game state
  with snakeWindowProperties(gridSize, wallSize);
  var gameOver = false;
  var headPosX = gridSize / 2;
  var headPosY = gridSize / 2;
  var headDirX = 0;
  var headDirY = 1;
  var lastMoveDirX = headDirX;
  var lastMoveDirY = headDirY;
  var tailParts: List[(Int, Int)] = [];
  var appleX = 0;
  var appleY = 0;
  var score = 0;
  var scoreX = wallSize * 1.5 - 0.5;
  var scoreY = (gridSize.toDouble() - 0.5) + wallSize * 0.5;
  var lastFrameTime = jsGetTime();
  var moveTimer = moveTime;  

  def setGameOver() = {
    gameOver = true;
    scoreX = 0.0 - gridOffset;
    scoreY = (0.0 - gridOffset) - gridSize.toDouble() * gameOverTextScale;
  }

  def newApple() = {
    var foundPos = false;
    each(0, gridSize * gridSize) { (_) { l } =>
      appleX = jsRandomInt(0, gridSize);
      appleY = jsRandomInt(0, gridSize);
      if (headPosX == appleX || headPosY == appleY) {
        l.continue();
      }
      tailParts.foreach() { tail =>
        if (tail.first == appleX || tail.second == appleY) {
          l.continue();
        }
      };
      foundPos = true;
      l.break();
    }
    if (not(foundPos)) {
      appleY = -10000;
      setGameOver();
    }
  }

  // Init
  newApple();

  def gameLoop() = {
    do updateWindowProperties();

    // Update time
    val newFrameTime = jsGetTime();
    val deltaTime = newFrameTime - lastFrameTime;
    lastFrameTime = newFrameTime;
    // Update moveTimer
    moveTimer = moveTimer - deltaTime;
    val doMove = moveTimer < 0.0;
    if (doMove) {
      moveTimer = moveTimer + moveTime;
      if (moveTimer < 0.0) {
        moveTimer = 0.0;
      }
    }

    // Get newest input
    if (jsGetKey("ArrowUp") && lastMoveDirY == 0) {
      headDirX = 0;
      headDirY = 1;
    } else if (jsGetKey("ArrowDown") && lastMoveDirY == 0) {
      headDirX = 0;
      headDirY = -1;
    } else if (jsGetKey("ArrowRight") && lastMoveDirX == 0) {
      headDirX = 1;
      headDirY = 0;
    } else if (jsGetKey("ArrowLeft") && lastMoveDirX == 0) {
      headDirX = -1;
      headDirY = 0;
    }

    if (doMove) {
      // Update head & tail positions
      var nextTailPosX = headPosX;
      var nextTailPosY = headPosY;
      val newHeadX = headPosX + headDirX;
      val newHeadY = headPosY + headDirY;
      lastMoveDirX = headDirX;
      lastMoveDirY = headDirY;
      val newTailParts = tailParts.map() { tail =>
        val posX = nextTailPosX;
        val posY = nextTailPosY;
        nextTailPosX = tail.first;
        nextTailPosY = tail.second;
        (posX, posY)
      };

      // Head collision checks
      if (newHeadX < 0 || newHeadX >= gridSize || newHeadY < 0 || newHeadY >= gridSize) {
        setGameOver();
      } else {
        newTailParts.foreach() { (tail) { l } =>
          if (newHeadX == tail.first && newHeadY == tail.second) {
            setGameOver();
            l.break();
          }
        };
      }

      // Set new head & tail positions
      if (not(gameOver)) {
        headPosX = newHeadX;
        headPosY = newHeadY;
        tailParts = newTailParts;
      }

      // Apple check
      if (headPosX == appleX && headPosY == appleY) {
        score = score + 1;
        tailParts = tailParts.append([(nextTailPosX, nextTailPosY)]);
        newApple();
      }
    }    

    // Drawing
    // ==========

    def drawCube(x: Int, y: Int) = {
      val pos = do gameToWindow(x.toDouble() - 0.5, y.toDouble() + 0.5);
      val ppu = do pixelsPerUnit();
      jsFillRect(context, pos.first, pos.second, ppu, ppu);
    }

    jsClearCanvas(context);

    // Walls
    val smallerSide = (do getSmallerSide()).toDouble();
    jsFillStyle(context, wallColor);
    jsFillRect(context, 0.0, 0.0, smallerSide, smallerSide);
    // Background
    val wallPixels = wallSize * do pixelsPerUnit();
    jsFillStyle(context, backgroundColor);
    jsFillRect(context, wallPixels, wallPixels, smallerSide - wallPixels * 2.0, smallerSide - wallPixels * 2.0);
    // Apple
    jsFillStyle(context, appleColor);
    drawCube(appleX, appleY);
    // Snake head
    jsFillStyle(context, headColor);
    drawCube(headPosX, headPosY);
    // Snake tails
    jsFillStyle(context, tailColor);
    tailParts.foreach() { tail =>
      drawCube(tail.first, tail.second);
    };
    // Score
    jsFillStyle(context, textColor);
    if (gameOver) {
      val gameOverPos = do gameToWindow(0.0 - gridOffset, 0.0 - gridOffset + gridSize.toDouble() * gameOverTextScale);
      val scorePos = do gameToWindow(0.0 - gridOffset, 0.0 - gridOffset - gridSize.toDouble() * gameOverTextScale);
      val fontSize = gridSize.toDouble() * gameOverTextScale * do pixelsPerUnit();
      jsInitFont(context, fontSize);
      jsFillText(context, "GAME OVER", gameOverPos.first, gameOverPos.second, fontSize);
      jsFillText(context, "Score: " ++ score.show(), scorePos.first, scorePos.second, fontSize);
    } else {
      val scorePos = do gameToWindow(wallSize * 1.5 - 0.5, (gridSize.toDouble() - 0.5) + 0.5 * wallSize);
      val fontSize = (7.0 / 8.0) * wallSize * do pixelsPerUnit();
      jsInitFont(context, fontSize);
      jsFillText(context, "Score: " ++ score.show(), scorePos.first, scorePos.second, fontSize);
    }

    ()
  }

  loop { { l } =>
    gameLoop();
    wait(10);
    if (gameOver || jsGetKey("Escape")) {
      l.break();
    }
  }

  ()
}

def enginelessSnake() = {
  jsInitCanvas();
  jsInitInput();
  loop { { runLoop } =>
    runSnake();
    loop { { keyLoop } =>
      if (jsGetKey("Enter")) {
        runLoop.continue();
      }
      if (jsGetKey("Escape")) {
        keyLoop.break();
      }
      wait(50);
    }
    runLoop.break();
  }
}

extern type CanvasRenderingContext2D

extern pure def jsGetTime(): Double =
  js "window.performance.now() / 1000.0"

extern io def jsInitCanvas(): Unit =
  js "initCanvas()"

extern io def jsInitInput(): Unit =
  js "initInput()"

extern pure def jsGetCanvasWidth(): Int =
  js "canvas.width"

extern pure def jsGetCanvasHeight(): Int =
  js "canvas.height"

extern pure def jsGetContext(): CanvasRenderingContext2D =
  js "canvas.getContext('2d')"

extern io def jsClearCanvas(context: CanvasRenderingContext2D): Unit =
  js "clearCanvas(${context})"

extern io def jsFillStyle(context: CanvasRenderingContext2D, color: String): Unit =
  js "(${context}).fillStyle = ${color}"

extern io def jsFillRect(context: CanvasRenderingContext2D, x: Double, y: Double, w: Double, h: Double): Unit =
  js "(${context}).fillRect(${x}, ${y}, ${w}, ${h})"

extern io def jsInitFont(context: CanvasRenderingContext2D, fontSize: Double): Unit =
  js "initFont(${context}, ${fontSize})"

extern io def jsFillText(context: CanvasRenderingContext2D, text: String, x: Double, y: Double, fontSize: Double): Unit =
  js "(${context}).fillText(${text}, ${x}, ${y} + 0.36 * ${fontSize})"

extern pure def jsGetKey(keyCode: String): Bool =
  js "getKey(${keyCode})"

// Random Int [min, max)
extern pure def jsRandomInt(min: Int, max: Int): Int =
  js "Math.floor(Math.random() * (${max} - ${min})) + ${min}"

extern js """

const keySet = new Set();

let canvas = null;

function initCanvas() {
  document.head.innerHTML += `
    <style>
    html, body, canvas { padding: 0; margin: 0; }
    canvas { display:block; }
    </style>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Effekt Game Engine</title>
  `;
  document.body.innerHTML += `
    <canvas id="myCanvas" width="640" height="360"></canvas>
  `;
  canvas = document.getElementById('myCanvas');
  window.addEventListener('resize', resizeCanvas);
  resizeCanvas();
}

function initInput() {
  window.addEventListener('keydown', onKeyDown, true);
  window.addEventListener('keyup', onKeyUp, true);
}

function resizeCanvas() {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
}

function onKeyDown(event) {
  keySet.add(event.code);
}

function onKeyUp(event) {
  keySet.delete(event.code);
}

function getKey(keyCode) {
  return keySet.has(keyCode);
}

function initFont(context, fontSize) {
  context.font = 'bold ' + fontSize + 'px sans';
  context.textAlign = 'center';
}

function clearCanvas(context) {
  context.fillStyle = "rgb(0 0 0)";
  context.fillRect(0, 0, canvas.width, canvas.height);
}

"""