import resizable_array

import io
import io/time

import game_engine_lib/math
import game_engine_lib/core
import game_engine_lib/ecs
import game_engine_lib/engine
import game_engine_lib/canvas_renderer
import game_engine_lib/input

/*
type Side {
  Left();
  Right();
}

def not(side: Side): Side = {
  side match {
    case Left() => Right()
    case Right() => Left()
  }
}

type ResetState {
  Continue();
  Reset(scoreSide: Side);
}

def toDouble(resetState: ResetState): Double = {
  resetState match {
    case Continue() => 0.0
    case Reset(Left()) => -1.0
    case Reset(Right()) => 1.0
  }
}

record Scores(left: Int, right: Int)
record TimeState(startTime: Double, elapsedTime: Double, deltaTime: Double)
record Paddle(pos: Vector2, size: Vector2Int)
record Ball(pos: Vector2, dir: Vector2, radius: Int)

def scoreSide(scores: Scores, side: Side): Scores = {
  side match {
    case Left() => Scores(scores.left + 1, scores.right)
    case Right() => Scores(scores.left, scores.right + 1)
  }
}

def addTransform() { prog: => Unit / { Component[Transform], Component[Option[Transform]], Components[Transform], Components[Option[Transform]] } }: Unit / {
  EntityManager, nextComponentId, nextEntityId
} = {
  with component[Transform]();
  prog();
}
*/

/*
def addPosition() { prog: => Unit / { Component[Position], Components[Position] } }: Unit / {
  EntityManager, nextComponentId, nextEntityId
} = {
  with component[Position]();
  prog();
}

def addRotation() { prog: => Unit / { Component[Rotation], Components[Rotation] } }: Unit / {
  EntityManager, nextComponentId, nextEntityId
} = {
  with component[Rotation]();
  prog();
}

def addScale() { prog: => Unit / { Component[Scale], Components[Scale] } }: Unit / {
  EntityManager, nextComponentId, nextEntityId
} = {
  with component[Scale]();
  prog();
}
*/

/*
def addShape() { prog: => Unit / { Component[Shape], Components[Shape] } }: Unit / {
  EntityManager, nextComponentId, nextEntityId
} = {
  with component[Shape]();
  prog();
}

record Player()
*/

/*
def addShape() { prog: => Unit / { Component[Shape], Components[Shape] } }: Unit / {
  EntityManager, nextComponentId, nextEntityId
} = {
  with component[Shape]();
  prog();
}

record Player()
*/

def main() = {
  with world();
  
  //with component[Player]();
  
  //with canvasRenderer();

  /*
  with addSystem[Transform, Shape, Player]() { { query } =>
    val deltaTime = (do getResource[Time]()).deltaTime;
    val movement = deltaTime * PI * 2.0 * 0.2;
    val rot = if (jsGetKey("ArrowRight")) {
      movement
    } else if (jsGetKey("ArrowLeft")) {
      0.0 - movement
    } else {
      0.0
    };
    query.foreachRW() { (entity, transform) =>
      Transform(
        transform.position,
        limitRotation(transform.rotation + rot),
        transform.scale
      )
    }
  };

  with addSystem[Transform, Player, Unit]() { { query } =>
    val deltaTime = (do getResource[Time]()).deltaTime;
    val movement = deltaTime * 4.0;
    val x = if (jsGetKey("ArrowRight")) {
      movement
    } else if (jsGetKey("ArrowLeft")) {
      0.0 - movement
    } else {
      0.0
    };
    val y = if (jsGetKey("ArrowUp")) {
      movement
    } else if (jsGetKey("ArrowDown")) {
      0.0 - movement
    } else {
      0.0
    };
    val change = Vector2(x, y);
    query.foreachRW() { (entity, transform) =>
      Transform(
        transform.position + change,
        transform.rotation,
        transform.scale
      )
    }
  };
  */
  
  /*
  with zipComponents3[Position, Rotation, Scale]();
  do createEntity[(Position, Rotation, Scale)]((
    default(),
    default(),
    Scale(Vector2(3.0, 1.5))
  ));
  */

  with component[Position]();
  do createEntity[Position](
    default()
  )

  /*
  do createEntity[(Transform, Shape)]((Transform(
    zero(),
    0.0,
    Vector2(3.0, 1.5)
  ), Rect(Color(255, 0, 255))));
  do createEntity[(Transform, Shape)]((Transform(
    Vector2(4.0, 2.0),
    0.0,
    Vector2(3.0, 1.5)
  ), Circle(Color(255, 0, 255))));
  do createEntity[(Transform, Shape)]((Transform(
    Vector2(-4.0, 2.0),
    0.0,
    Vector2(1.0, 1.0)
  ), Text(Color(255, 0, 255), "Test-text")));
  do createEntity[(Transform, Shape)]((Transform(
    Vector2(-4.0, -2.0),
    0.0,
    Vector2(1.333, 0.75)
  ), Text(Color(255, 0, 255), "stretched")));
  do createEntity[(Transform, Shape)]((Transform(
    Vector2(4.0, -2.0),
    0.0,
    Vector2(0.75, 1.333)
  ), Text(Color(255, 0, 255), "squished")));
  
  with zipComponents3[Transform, Shape, Player]();
  do createEntity[(Transform, Shape, Player)]((Transform(
    Vector2(0.0, -2.0),
    0.0,
    Vector2(0.4, 0.6)
  ), Text(Color(20, 200, 150), "Player"), Player()));

  do setResource[Camera](Camera(CameraTransform(
    zero(),
    0.0,
    16.0
  )));
  */

  //do runWorld();
  
  /*
  val playAreaSize = Vector2Int(getCanvasHeight(), getCanvasHeight());

  val paddleSpeed = 0.8 * playAreaSize.y.toDouble();
  val paddleSize: Vector2Int = Vector2(0.02275 * playAreaSize.y.toDouble(), 0.065 * playAreaSize.y.toDouble()).round();
  // Play-area width is = canvas height, so the paddle's outer edge is exactly on the Play-area limit
  val playAreaMin: Vector2Int = Vector2(getCanvasWidth().toDouble() / 2.0 - 0.5 * playAreaSize.x.toDouble(), 0.0).round();
  val playAreaMax: Vector2Int = Vector2(getCanvasWidth().toDouble() / 2.0 + 0.5 * playAreaSize.x.toDouble(), playAreaSize.y.toDouble()).round();
  val paddleStartPosY = playAreaSize.y.toDouble() / 2.0 - paddleSize.y.toDouble() / 2.0;

  val ballSpeed = 0.65 * paddleSpeed;
  val ballRadius = round(0.0075 * playAreaSize.y.toDouble());
  val ballStartPos = Vector2(getCanvasWidth().toDouble() / 2.0, playAreaSize.y.toDouble() / 2.0);
  val ballStartDir = Vector2(1.0, 1.0).normalize();

  var paddle1Pos = Vector2(playAreaMin.x.toDouble(), paddleStartPosY);
  var paddle2Pos = Vector2(playAreaMax.x.toDouble() - paddleSize.x.toDouble(), paddleStartPosY);
  
  var ballPos = ballStartPos;
  var ballDir = ballStartDir;

  var scores = Scores(0, 0);
  var timeState = TimeState(getTime(), 0.0, 0.0);
  
  //runGameLoop {
    
    timeState = timeState.updateTimeState();

    var direction1 = 0;
    var direction2 = 0;
    if (isInput1Up()) {
      direction1 = direction1 - 1;
    }
    if (isInput1Down()) {
      direction1 = direction1 + 1;
    }
    if (isInput2Up()) {
      direction2 = direction2 - 1;
    }
    if (isInput2Down()) {
      direction2 = direction2 + 1;
    }
    paddle1Pos = paddle1Pos.setY(paddle1Pos.y + direction1.toDouble() * timeState.deltaTime * paddleSpeed);
    paddle2Pos = paddle2Pos.setY(paddle2Pos.y + direction2.toDouble() * timeState.deltaTime * paddleSpeed);
    if (paddle1Pos.y < playAreaMin.y.toDouble()) {
      paddle1Pos = paddle1Pos.setY(playAreaMin.y.toDouble());
    } else if (paddle1Pos.y > (playAreaMax.y - paddleSize.y).toDouble()) {
      paddle1Pos = paddle1Pos.setY((playAreaMax.y - paddleSize.y).toDouble());
    }
    if (paddle2Pos.y < playAreaMin.y.toDouble()) {
      paddle2Pos = paddle2Pos.setY(playAreaMin.y.toDouble());
    } else if (paddle2Pos.y > (playAreaMax.y - paddleSize.y).toDouble()) {
      paddle2Pos = paddle2Pos.setY((playAreaMax.y - paddleSize.y).toDouble());
    }
    
    ballPos = ballPos + ballDir * timeState.deltaTime * ballSpeed;
    if (ballPos.y < (playAreaMin.y + ballRadius).toDouble()) {
      ballPos = ballPos.setY(ballRadius.toDouble());
      ballDir = ballDir.setY(-1.0 * ballDir.y);
    } else if (ballPos.y > (playAreaMax.y - ballRadius).toDouble()) {
      ballPos = ballPos.setY((playAreaSize.y - ballRadius).toDouble());
      ballDir = ballDir.setY(-1.0 * ballDir.y);
    }

    var checkPaddle = paddle1Pos;
    if (ballDir.x > 0.0) {
      checkPaddle = paddle2Pos;
    }
    checkPaddle = checkPaddle + paddleSize.toVector2() / 2.0;
    val diff = ballPos - checkPaddle;
    if (diff.length() < ballRadius.toDouble() + paddleSize.y.toDouble() / 2.0) {
      ballDir = diff.normalize();
    }

    var resetState = Continue();
    if (ballPos.x < (playAreaMin.x + ballRadius).toDouble() && ballDir.x < 0.0) {
      resetState = Reset(Right());
    } else if (ballPos.x > (playAreaMax.x - ballRadius).toDouble() && ballDir.x > 0.0) {
      resetState = Reset(Left());
    }
    resetState match {
      case Reset(scoreSide) =>
        scores = scores.scoreSide(scoreSide);
        paddle1Pos = paddle1Pos.setY(paddleStartPosY);
        paddle2Pos = paddle2Pos.setY(paddleStartPosY);
        ballPos = ballStartPos;
        ballDir = Vector2(resetState.toDouble() * ballStartDir.x, ballStartDir.y);
      case _ => ()
    }

    clearCanvas();
    val shapes: List[Shape] = [
      Rectangle(paddle1Pos.round(), paddleSize, Color(255, 255, 255)),
      Rectangle(paddle2Pos.round(), paddleSize, Color(255, 255, 255)),
      Circle(ballPos.round(), ballRadius, Color(255, 255, 255)),
      Text(Vector2Int(playAreaMin.x + (playAreaMax.x - playAreaMin.x) / 4, playAreaSize.y / 8), playAreaSize.y / 12, Color(255, 255, 255), show(scores.left)),
      Text(Vector2Int(playAreaMax.x - (playAreaMax.x - playAreaMin.x) / 4, playAreaSize.y / 8), playAreaSize.y / 12, Color(255, 255, 255), show(scores.right))
    ];
    drawShapes(shapes);

  //}
  */
  ()
}
