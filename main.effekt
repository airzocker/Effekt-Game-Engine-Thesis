import resizable_array
import array
import mutable/map

import io
import io/time

import game_engine_lib/core
import game_engine_lib/engine
import game_engine_lib/renderer

type Side {
  Left();
  Right();
}

def not(side: Side): Side = {
  side match {
    case Left() => Right()
    case Right() => Left()
  }
}

type ResetState {
  Continue();
  Reset(scoreSide: Side);
}

def toDouble(resetState: ResetState): Double = {
  resetState match {
    case Continue() => 0.0
    case Reset(Left()) => -1.0
    case Reset(Right()) => 1.0
  }
}

record Scores(left: Int, right: Int)
record TimeState(startTime: Double, elapsedTime: Double, deltaTime: Double)
record Paddle(pos: Vector2, size: Vector2Int)
record Ball(pos: Vector2, dir: Vector2, radius: Int)

def scoreSide(scores: Scores, side: Side): Scores = {
  side match {
    case Left() => Scores(scores.left + 1, scores.right)
    case Right() => Scores(scores.left, scores.right + 1)
  }
}

def updateTimeState(timeState: TimeState): TimeState = {
    val newElapsedTime = getTime() - timeState.startTime;
    TimeState(timeState.startTime, newElapsedTime, newElapsedTime - timeState.elapsedTime)
}

interface Yield[T] {
  def yield(value: T): Unit
}

interface Iterator[T] {
  def next(): Option[T]
}

def createIterator[T] {yielder: => Unit / Yield[T]} {r: Region} = {
  var iterFun in r = yielder;
  var iterValue in r = None();
  new Iterator[T] {
    def next() = {
      iterValue = None();
      try {
        iterFun()
      } with Yield[T] {
        def yield(value: T) = {
          iterFun = fun() { resume(()) }
          iterValue = Some(value);
        }
      }
      iterValue
    }
  }
}

def iterate[T](arr: ResizableArray[T]) {r: Region} = {
  createIterator[T]() {
    arr.foreach {
      x => do yield(x)
    }
  } {r}
}

interface Components[T] {
  def get(archId: Int, index: Int): T
  def set(archId: Int, index: Int, value: T): Unit
  def push(archId: Int, value: T): Int
  def swapRemove(archId: Int, index: Int): Option[Int]
}

def componentStore[T] { prog: => Unit / Components[T] }: Unit / {} = {
  with report[OutOfBounds]();
  var archVectors = resizableArray[ResizableArray[T]](4);
  var archIdToIndexMap = emptyMap();
  var archIndexToIdMap = emptyMap();
  try {
    prog();
  } with Components[T] {
    def get(archId: Int, index: Int) = {
      resume(archVectors.unsafeGet(archIdToIndexMap.unsafeGet(archId)).unsafeGet(index))
    }
    def set(archId: Int, index: Int, value: T) = {
      archVectors.unsafeGet(archIdToIndexMap.unsafeGet(archId)).unsafeSet(index, value);
      resume(())
    }
    def push(archId: Int, value: T) = {
      resume(
        archIdToIndexMap.get(archId) match {        
          case Some(archIndex) => archVectors.unsafeGet(archIndex).add(value)
          case None() => {
            val newArchIndex = archVectors.size();
            val newArchVector = resizableArray(4);
            newArchVector.add(value);
            archVectors.add(newArchVector);
            archIdToIndexMap.update(archId, newArchIndex);
            archIndexToIdMap.update(newArchIndex, archId)
            0
          }
        }
      )
    }
    def swapRemove(archId: Int, index: Int) = {
      val archIndex = archIdToIndexMap.unsafeGet(archId);
      val arr = archVectors.unsafeGet(archIndex);
      val swapIndex = arr.removeSwap(index);
      if (arr.size() == 0) {
        archVectors.removeSwap(archIndex) match {
          case Some(i) => {
            val swappedArchId = archIndexToIdMap.unsafeGet(i);
            archIndexToIdMap.update(archIndex, swappedArchId);
            archIdToIndexMap.update(swappedArchId, archIndex);
          }
          case None() => ()
        }
        archIndexToIdMap.delete(archVectors.size());
        archIdToIndexMap.delete(archId);
      }
      resume(swapIndex)
    }
  }
}

def main() = {
  var vec = resizableArray(5);
  vec.add(0);
  vec.add(1);
  vec.add(2);
  vec.add(3);
  vec.add(4);
  val testIter = vec.iterate() {global};
  loop { {l} =>
    testIter.next() match {
      case Some(x) => { println(x) }
      case None() => {
        println("empty");
        l.break()
      }
    }
  }

  resizeCanvas();
  registerEvents();
  
  with defaultContext;
  
  val playAreaSize = Vector2Int(getCanvasHeight(), getCanvasHeight());

  val paddleSpeed = 0.8 * playAreaSize.y.toDouble();
  val paddleSize: Vector2Int = Vector2(0.02275 * playAreaSize.y.toDouble(), 0.065 * playAreaSize.y.toDouble()).round();
  // Play-area width is = canvas height, so the paddle's outer edge is exactly on the Play-area limit
  val playAreaMin: Vector2Int = Vector2(getCanvasWidth().toDouble() / 2.0 - 0.5 * playAreaSize.x.toDouble(), 0.0).round();
  val playAreaMax: Vector2Int = Vector2(getCanvasWidth().toDouble() / 2.0 + 0.5 * playAreaSize.x.toDouble(), playAreaSize.y.toDouble()).round();
  val paddleStartPosY = playAreaSize.y.toDouble() / 2.0 - paddleSize.y.toDouble() / 2.0;

  val ballSpeed = 0.65 * paddleSpeed;
  val ballRadius = round(0.0075 * playAreaSize.y.toDouble());
  val ballStartPos = Vector2(getCanvasWidth().toDouble() / 2.0, playAreaSize.y.toDouble() / 2.0);
  val ballStartDir = Vector2(1.0, 1.0).normalize();

  var paddle1Pos = Vector2(playAreaMin.x.toDouble(), paddleStartPosY);
  var paddle2Pos = Vector2(playAreaMax.x.toDouble() - paddleSize.x.toDouble(), paddleStartPosY);
  
  var ballPos = ballStartPos;
  var ballDir = ballStartDir;

  var scores = Scores(0, 0);
  var timeState = TimeState(getTime(), 0.0, 0.0);
  
  runGameLoop {
    
    timeState = timeState.updateTimeState();

    var direction1 = 0;
    var direction2 = 0;
    if (isInput1Up()) {
      direction1 = direction1 - 1;
    }
    if (isInput1Down()) {
      direction1 = direction1 + 1;
    }
    if (isInput2Up()) {
      direction2 = direction2 - 1;
    }
    if (isInput2Down()) {
      direction2 = direction2 + 1;
    }
    paddle1Pos = paddle1Pos.setY(paddle1Pos.y + direction1.toDouble() * timeState.deltaTime * paddleSpeed);
    paddle2Pos = paddle2Pos.setY(paddle2Pos.y + direction2.toDouble() * timeState.deltaTime * paddleSpeed);
    if (paddle1Pos.y < playAreaMin.y.toDouble()) {
      paddle1Pos = paddle1Pos.setY(playAreaMin.y.toDouble());
    } else if (paddle1Pos.y > (playAreaMax.y - paddleSize.y).toDouble()) {
      paddle1Pos = paddle1Pos.setY((playAreaMax.y - paddleSize.y).toDouble());
    }
    if (paddle2Pos.y < playAreaMin.y.toDouble()) {
      paddle2Pos = paddle2Pos.setY(playAreaMin.y.toDouble());
    } else if (paddle2Pos.y > (playAreaMax.y - paddleSize.y).toDouble()) {
      paddle2Pos = paddle2Pos.setY((playAreaMax.y - paddleSize.y).toDouble());
    }
    
    ballPos = ballPos + ballDir * timeState.deltaTime * ballSpeed;
    if (ballPos.y < (playAreaMin.y + ballRadius).toDouble()) {
      ballPos = ballPos.setY(ballRadius.toDouble());
      ballDir = ballDir.setY(-1.0 * ballDir.y);
    } else if (ballPos.y > (playAreaMax.y - ballRadius).toDouble()) {
      ballPos = ballPos.setY((playAreaSize.y - ballRadius).toDouble());
      ballDir = ballDir.setY(-1.0 * ballDir.y);
    }

    var checkPaddle = paddle1Pos;
    if (ballDir.x > 0.0) {
      checkPaddle = paddle2Pos;
    }
    checkPaddle = checkPaddle + paddleSize.toVector2() / 2.0;
    val diff = ballPos - checkPaddle;
    if (diff.length() < ballRadius.toDouble() + paddleSize.y.toDouble() / 2.0) {
      ballDir = diff.normalize();
    }

    var resetState = Continue();
    if (ballPos.x < (playAreaMin.x + ballRadius).toDouble() && ballDir.x < 0.0) {
      resetState = Reset(Right());
    } else if (ballPos.x > (playAreaMax.x - ballRadius).toDouble() && ballDir.x > 0.0) {
      resetState = Reset(Left());
    }
    resetState match {
      case Reset(scoreSide) =>
        scores = scores.scoreSide(scoreSide);
        paddle1Pos = paddle1Pos.setY(paddleStartPosY);
        paddle2Pos = paddle2Pos.setY(paddleStartPosY);
        ballPos = ballStartPos;
        ballDir = Vector2(resetState.toDouble() * ballStartDir.x, ballStartDir.y);
      case _ => ()
    }

    clearCanvas();
    val shapes: List[Shape] = [
      Rectangle(paddle1Pos.round(), paddleSize, Color(255, 255, 255)),
      Rectangle(paddle2Pos.round(), paddleSize, Color(255, 255, 255)),
      Circle(ballPos.round(), ballRadius, Color(255, 255, 255)),
      Text(Vector2Int(playAreaMin.x + (playAreaMax.x - playAreaMin.x) / 4, playAreaSize.y / 8), playAreaSize.y / 12, Color(255, 255, 255), show(scores.left)),
      Text(Vector2Int(playAreaMax.x - (playAreaMax.x - playAreaMin.x) / 4, playAreaSize.y / 8), playAreaSize.y / 12, Color(255, 255, 255), show(scores.right))
    ];
    drawShapes(shapes);

  }
}
