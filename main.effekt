import io
import io/time

import game_engine_lib/core
import game_engine_lib/vector
import game_engine_lib/renderer

def main() = eventloop(box {
  resizeCanvas();
  registerEvents();

  with defaultContext;
  
  var score1 = 0;
  var score2 = 0;
  
  val playAreaSize = Vector2Int(getCanvasHeight(), getCanvasHeight());

  val paddleSpeed = 0.8 * playAreaSize.y.toDouble();
  val paddleSize: Vector2Int = Vector2(0.02275 * playAreaSize.y.toDouble(), 0.065 * playAreaSize.y.toDouble()).round();
  // Play-area width is = canvas height, so the paddle's outer edge is exactly on the Play-area limit
  val playAreaMin: Vector2Int = Vector2(getCanvasWidth().toDouble() / 2.0 - 0.5 * playAreaSize.x.toDouble(), 0.0).round();
  val playAreaMax: Vector2Int = Vector2(getCanvasWidth().toDouble() / 2.0 + 0.5 * playAreaSize.x.toDouble(), playAreaSize.y.toDouble()).round();
  val paddleStartPosY = playAreaSize.y.toDouble() / 2.0 - paddleSize.y.toDouble() / 2.0;

  val ballSpeed = 0.65 * paddleSpeed;
  val ballRadius = round(0.0075 * playAreaSize.y.toDouble());
  val ballStartPos = Vector2(getCanvasWidth().toDouble() / 2.0, playAreaSize.y.toDouble() / 2.0);
  val ballStartDir = Vector2(1.0, 1.0).normalize();

  val startTime = getTime();
  var elapsedTime = 0.0;
  var deltaTime = 0.0;

  var paddle1Pos = Vector2(playAreaMin.x.toDouble(), paddleStartPosY);
  var paddle2Pos = Vector2(playAreaMax.x.toDouble() - paddleSize.x.toDouble(), paddleStartPosY);
  
  var ballPos = ballStartPos;
  var ballDir = ballStartDir;

  while (not(isInputEscape())) {
    // Loop needs wait() to give control flow back, otherwise JavaScript events will never be detected
    do await(do promise(box { wait(0) } ));

    val newElapsedTime = getTime() - startTime;
    deltaTime = newElapsedTime - elapsedTime;
    elapsedTime = newElapsedTime;

    var direction1 = 0;
    var direction2 = 0;
    if (isInput1Up()) {
      direction1 = direction1 - 1;
    }
    if (isInput1Down()) {
      direction1 = direction1 + 1;
    }
    if (isInput2Up()) {
      direction2 = direction2 - 1;
    }
    if (isInput2Down()) {
      direction2 = direction2 + 1;
    }
    paddle1Pos = paddle1Pos.setY(paddle1Pos.y + direction1.toDouble() * deltaTime * paddleSpeed);
    paddle2Pos = paddle2Pos.setY(paddle2Pos.y + direction2.toDouble() * deltaTime * paddleSpeed);
    if (paddle1Pos.y < playAreaMin.y.toDouble()) {
      paddle1Pos = paddle1Pos.setY(playAreaMin.y.toDouble());
    } else if (paddle1Pos.y > (playAreaMax.y - paddleSize.y).toDouble()) {
      paddle1Pos = paddle1Pos.setY((playAreaMax.y - paddleSize.y).toDouble());
    }
    if (paddle2Pos.y < playAreaMin.y.toDouble()) {
      paddle2Pos = paddle2Pos.setY(playAreaMin.y.toDouble());
    } else if (paddle2Pos.y > (playAreaMax.y - paddleSize.y).toDouble()) {
      paddle2Pos = paddle2Pos.setY((playAreaMax.y - paddleSize.y).toDouble());
    }
    
    ballPos = ballPos + ballDir * deltaTime * ballSpeed;
    if (ballPos.y < (playAreaMin.y + ballRadius).toDouble()) {
      ballPos = ballPos.setY(ballRadius.toDouble());
      ballDir = ballDir.setY(-1.0 * ballDir.y);
    } else if (ballPos.y > (playAreaMax.y - ballRadius).toDouble()) {
      ballPos = ballPos.setY((playAreaSize.y - ballRadius).toDouble());
      ballDir = ballDir.setY(-1.0 * ballDir.y);
    }

    var checkPaddle = paddle1Pos;
    if (ballDir.x > 0.0) {
      checkPaddle = paddle2Pos;
    }
    checkPaddle = checkPaddle + paddleSize.toVector2() / 2.0;
    val diff = ballPos - checkPaddle;
    if (diff.length() < ballRadius.toDouble() + paddleSize.y.toDouble() / 2.0) {
      ballDir = diff.normalize();
    }

    // 0 means continue, 1 or -1 indicates which side got a point
    var resetState = 0;
    if (ballPos.x < (playAreaMin.x + ballRadius).toDouble() && ballDir.x < 0.0) {
      resetState = 1;
    } else if (ballPos.x > (playAreaMax.x - ballRadius).toDouble() && ballDir.x > 0.0) {
      resetState = -1;
    }
    if (resetState != 0) {
      if (resetState == -1) {
        score1 = score1 + 1;
      } else {
        score2 = score2 + 1;
      }
      paddle1Pos = paddle1Pos.setY(paddleStartPosY);
      paddle2Pos = paddle2Pos.setY(paddleStartPosY);
      ballPos = ballStartPos;
      ballDir = Vector2(resetState.toDouble() * ballStartDir.x, ballStartDir.y);
    }

    clearCanvas();
    val shapes: List[Shape] = [
      Rectangle(paddle1Pos.round(), paddleSize, Color(255, 255, 255)),
      Rectangle(paddle2Pos.round(), paddleSize, Color(255, 255, 255)),
      Circle(ballPos.round(), ballRadius, Color(255, 255, 255)),
      Text(Vector2Int(playAreaMin.x + (playAreaMax.x - playAreaMin.x) / 4, playAreaSize.y / 8), playAreaSize.y / 12, Color(255, 255, 255), score1.show()),
      Text(Vector2Int(playAreaMax.x - (playAreaMax.x - playAreaMin.x) / 4, playAreaSize.y / 8), playAreaSize.y / 12, Color(255, 255, 255), score2.show())
    ];
    drawShapes(shapes);
  }
} )
