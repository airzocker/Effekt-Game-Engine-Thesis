import resizable_array

import io
import io/time

import game_engine_lib/math
import game_engine_lib/core
import game_engine_lib/ecs
import game_engine_lib/engine
import game_engine_lib/renderer

type Side {
  Left();
  Right();
}

def not(side: Side): Side = {
  side match {
    case Left() => Right()
    case Right() => Left()
  }
}

type ResetState {
  Continue();
  Reset(scoreSide: Side);
}

def toDouble(resetState: ResetState): Double = {
  resetState match {
    case Continue() => 0.0
    case Reset(Left()) => -1.0
    case Reset(Right()) => 1.0
  }
}

record Scores(left: Int, right: Int)
record TimeState(startTime: Double, elapsedTime: Double, deltaTime: Double)
record Paddle(pos: Vector2, size: Vector2Int)
record Ball(pos: Vector2, dir: Vector2, radius: Int)

def scoreSide(scores: Scores, side: Side): Scores = {
  side match {
    case Left() => Scores(scores.left + 1, scores.right)
    case Right() => Scores(scores.left, scores.right + 1)
  }
}

def updateTimeState(timeState: TimeState): TimeState = {
    val newElapsedTime = getTime() - timeState.startTime;
    TimeState(timeState.startTime, newElapsedTime, newElapsedTime - timeState.elapsedTime)
}

def testEcs() = {
  with world();
  
  with component[Int]();
  with component[Double]();
  with component[String]();
  
  with createResource[Vector2](Vector2(1.1, 2.2));
  
  with zipComponents2[Int, Double]();
  with addSystem[(Int, Double), Unit, String]() { { query } =>
    println("Resource vec x: " ++ (do getResource[Vector2]()).x.show());
    println("Resource vec y: " ++ (do getResource[Vector2]()).y.show());
    // TODO: How can I remove the duplicate type while having a single-run system body?
    query.foreachEntityRO() { (entity, values) =>
      println("Entity: " ++ entity.id.show());
      values match {
        case (int, double) => {
          println("Int: " ++ int.show());
          println("Double: " ++ double.show());
        }
      }
      do createEntity[(Int, Double)]((99999, 99999.99999));
      ()
    }
  };

  do createEntity[(Int, Double)]((1, 10.1));
  do createEntity[(Int, Double)]((2, 20.2));
  do createEntity[(Int, Double)]((3, 30.3));
  
  with zipComponents3[Int, Double, String]();
  do createEntity[(Int, Double, String)]((4, 40.4, "First Triple Entity"));
  do createEntity[(Int, Double, String)]((5, 50.5, "Second Triple Entity"));
  
  do createEntity[Int](6);
  do createEntity[Int](7);

  do stepWorld();
  println("========================");
  do stepWorld();
}

def main() = {
  testEcs();

  resizeCanvas();
  registerEvents();
  
  with defaultContext;
  
  val playAreaSize = Vector2Int(getCanvasHeight(), getCanvasHeight());

  val paddleSpeed = 0.8 * playAreaSize.y.toDouble();
  val paddleSize: Vector2Int = Vector2(0.02275 * playAreaSize.y.toDouble(), 0.065 * playAreaSize.y.toDouble()).round();
  // Play-area width is = canvas height, so the paddle's outer edge is exactly on the Play-area limit
  val playAreaMin: Vector2Int = Vector2(getCanvasWidth().toDouble() / 2.0 - 0.5 * playAreaSize.x.toDouble(), 0.0).round();
  val playAreaMax: Vector2Int = Vector2(getCanvasWidth().toDouble() / 2.0 + 0.5 * playAreaSize.x.toDouble(), playAreaSize.y.toDouble()).round();
  val paddleStartPosY = playAreaSize.y.toDouble() / 2.0 - paddleSize.y.toDouble() / 2.0;

  val ballSpeed = 0.65 * paddleSpeed;
  val ballRadius = round(0.0075 * playAreaSize.y.toDouble());
  val ballStartPos = Vector2(getCanvasWidth().toDouble() / 2.0, playAreaSize.y.toDouble() / 2.0);
  val ballStartDir = Vector2(1.0, 1.0).normalize();

  var paddle1Pos = Vector2(playAreaMin.x.toDouble(), paddleStartPosY);
  var paddle2Pos = Vector2(playAreaMax.x.toDouble() - paddleSize.x.toDouble(), paddleStartPosY);
  
  var ballPos = ballStartPos;
  var ballDir = ballStartDir;

  var scores = Scores(0, 0);
  var timeState = TimeState(getTime(), 0.0, 0.0);
  
  runGameLoop {
    
    timeState = timeState.updateTimeState();

    var direction1 = 0;
    var direction2 = 0;
    if (isInput1Up()) {
      direction1 = direction1 - 1;
    }
    if (isInput1Down()) {
      direction1 = direction1 + 1;
    }
    if (isInput2Up()) {
      direction2 = direction2 - 1;
    }
    if (isInput2Down()) {
      direction2 = direction2 + 1;
    }
    paddle1Pos = paddle1Pos.setY(paddle1Pos.y + direction1.toDouble() * timeState.deltaTime * paddleSpeed);
    paddle2Pos = paddle2Pos.setY(paddle2Pos.y + direction2.toDouble() * timeState.deltaTime * paddleSpeed);
    if (paddle1Pos.y < playAreaMin.y.toDouble()) {
      paddle1Pos = paddle1Pos.setY(playAreaMin.y.toDouble());
    } else if (paddle1Pos.y > (playAreaMax.y - paddleSize.y).toDouble()) {
      paddle1Pos = paddle1Pos.setY((playAreaMax.y - paddleSize.y).toDouble());
    }
    if (paddle2Pos.y < playAreaMin.y.toDouble()) {
      paddle2Pos = paddle2Pos.setY(playAreaMin.y.toDouble());
    } else if (paddle2Pos.y > (playAreaMax.y - paddleSize.y).toDouble()) {
      paddle2Pos = paddle2Pos.setY((playAreaMax.y - paddleSize.y).toDouble());
    }
    
    ballPos = ballPos + ballDir * timeState.deltaTime * ballSpeed;
    if (ballPos.y < (playAreaMin.y + ballRadius).toDouble()) {
      ballPos = ballPos.setY(ballRadius.toDouble());
      ballDir = ballDir.setY(-1.0 * ballDir.y);
    } else if (ballPos.y > (playAreaMax.y - ballRadius).toDouble()) {
      ballPos = ballPos.setY((playAreaSize.y - ballRadius).toDouble());
      ballDir = ballDir.setY(-1.0 * ballDir.y);
    }

    var checkPaddle = paddle1Pos;
    if (ballDir.x > 0.0) {
      checkPaddle = paddle2Pos;
    }
    checkPaddle = checkPaddle + paddleSize.toVector2() / 2.0;
    val diff = ballPos - checkPaddle;
    if (diff.length() < ballRadius.toDouble() + paddleSize.y.toDouble() / 2.0) {
      ballDir = diff.normalize();
    }

    var resetState = Continue();
    if (ballPos.x < (playAreaMin.x + ballRadius).toDouble() && ballDir.x < 0.0) {
      resetState = Reset(Right());
    } else if (ballPos.x > (playAreaMax.x - ballRadius).toDouble() && ballDir.x > 0.0) {
      resetState = Reset(Left());
    }
    resetState match {
      case Reset(scoreSide) =>
        scores = scores.scoreSide(scoreSide);
        paddle1Pos = paddle1Pos.setY(paddleStartPosY);
        paddle2Pos = paddle2Pos.setY(paddleStartPosY);
        ballPos = ballStartPos;
        ballDir = Vector2(resetState.toDouble() * ballStartDir.x, ballStartDir.y);
      case _ => ()
    }

    clearCanvas();
    val shapes: List[Shape] = [
      Rectangle(paddle1Pos.round(), paddleSize, Color(255, 255, 255)),
      Rectangle(paddle2Pos.round(), paddleSize, Color(255, 255, 255)),
      Circle(ballPos.round(), ballRadius, Color(255, 255, 255)),
      Text(Vector2Int(playAreaMin.x + (playAreaMax.x - playAreaMin.x) / 4, playAreaSize.y / 8), playAreaSize.y / 12, Color(255, 255, 255), show(scores.left)),
      Text(Vector2Int(playAreaMax.x - (playAreaMax.x - playAreaMin.x) / 4, playAreaSize.y / 8), playAreaSize.y / 12, Color(255, 255, 255), show(scores.right))
    ];
    drawShapes(shapes);

  }
}
